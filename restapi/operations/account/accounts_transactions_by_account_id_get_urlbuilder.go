// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/url"
	golangswaggerpaths "path"
	"strings"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AccountsTransactionsByAccountIDGetURL generates an URL for the accounts transactions by account Id get operation
type AccountsTransactionsByAccountIDGetURL struct {
	AccountID string

	BookingStatus      string
	DateFrom           *strfmt.Date
	DateTo             *strfmt.Date
	DeltaList          *bool
	EntryReferenceFrom *string

	_basePath string
	// avoid unkeyed usage
	_ struct{}
}

// WithBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AccountsTransactionsByAccountIDGetURL) WithBasePath(bp string) *AccountsTransactionsByAccountIDGetURL {
	o.SetBasePath(bp)
	return o
}

// SetBasePath sets the base path for this url builder, only required when it's different from the
// base path specified in the swagger spec.
// When the value of the base path is an empty string
func (o *AccountsTransactionsByAccountIDGetURL) SetBasePath(bp string) {
	o._basePath = bp
}

// Build a url path and query string
func (o *AccountsTransactionsByAccountIDGetURL) Build() (*url.URL, error) {
	var result url.URL

	var _path = "/accounts/{account-id}/transactions"

	accountID := o.AccountID
	if accountID != "" {
		_path = strings.Replace(_path, "{account-id}", accountID, -1)
	} else {
		return nil, errors.New("AccountID is required on AccountsTransactionsByAccountIDGetURL")
	}

	_basePath := o._basePath
	if _basePath == "" {
		_basePath = "/psd2/v1"
	}
	result.Path = golangswaggerpaths.Join(_basePath, _path)

	qs := make(url.Values)

	bookingStatus := o.BookingStatus
	if bookingStatus != "" {
		qs.Set("bookingStatus", bookingStatus)
	}

	var dateFrom string
	if o.DateFrom != nil {
		dateFrom = o.DateFrom.String()
	}
	if dateFrom != "" {
		qs.Set("dateFrom", dateFrom)
	}

	var dateTo string
	if o.DateTo != nil {
		dateTo = o.DateTo.String()
	}
	if dateTo != "" {
		qs.Set("dateTo", dateTo)
	}

	var deltaList string
	if o.DeltaList != nil {
		deltaList = swag.FormatBool(*o.DeltaList)
	}
	if deltaList != "" {
		qs.Set("deltaList", deltaList)
	}

	var entryReferenceFrom string
	if o.EntryReferenceFrom != nil {
		entryReferenceFrom = *o.EntryReferenceFrom
	}
	if entryReferenceFrom != "" {
		qs.Set("entryReferenceFrom", entryReferenceFrom)
	}

	result.RawQuery = qs.Encode()

	return &result, nil
}

// Must is a helper function to panic when the url builder returns an error
func (o *AccountsTransactionsByAccountIDGetURL) Must(u *url.URL, err error) *url.URL {
	if err != nil {
		panic(err)
	}
	if u == nil {
		panic("url can't be nil")
	}
	return u
}

// String returns the string representation of the path with query string
func (o *AccountsTransactionsByAccountIDGetURL) String() string {
	return o.Must(o.Build()).String()
}

// BuildFull builds a full url with scheme, host, path and query string
func (o *AccountsTransactionsByAccountIDGetURL) BuildFull(scheme, host string) (*url.URL, error) {
	if scheme == "" {
		return nil, errors.New("scheme is required for a full url on AccountsTransactionsByAccountIDGetURL")
	}
	if host == "" {
		return nil, errors.New("host is required for a full url on AccountsTransactionsByAccountIDGetURL")
	}

	base, err := o.Build()
	if err != nil {
		return nil, err
	}

	base.Scheme = scheme
	base.Host = host
	return base, nil
}

// StringFull returns the string representation of a complete url
func (o *AccountsTransactionsByAccountIDGetURL) StringFull(scheme, host string) string {
	return o.Must(o.BuildFull(scheme, host)).String()
}
