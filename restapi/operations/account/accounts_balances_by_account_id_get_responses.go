// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/openpsd/psd2-server/models"
)

// AccountsBalancesByAccountIDGetOKCode is the HTTP code returned for type AccountsBalancesByAccountIDGetOK
const AccountsBalancesByAccountIDGetOKCode int = 200

/*AccountsBalancesByAccountIDGetOK OK

swagger:response accountsBalancesByAccountIdGetOK
*/
type AccountsBalancesByAccountIDGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.AccountsBalancesResponse `json:"body,omitempty"`
}

// NewAccountsBalancesByAccountIDGetOK creates AccountsBalancesByAccountIDGetOK with default headers values
func NewAccountsBalancesByAccountIDGetOK() *AccountsBalancesByAccountIDGetOK {

	return &AccountsBalancesByAccountIDGetOK{}
}

// WithPayload adds the payload to the accounts balances by account Id get o k response
func (o *AccountsBalancesByAccountIDGetOK) WithPayload(payload *models.AccountsBalancesResponse) *AccountsBalancesByAccountIDGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accounts balances by account Id get o k response
func (o *AccountsBalancesByAccountIDGetOK) SetPayload(payload *models.AccountsBalancesResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AccountsBalancesByAccountIDGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AccountsBalancesByAccountIDGetBadRequestCode is the HTTP code returned for type AccountsBalancesByAccountIDGetBadRequest
const AccountsBalancesByAccountIDGetBadRequestCode int = 400

/*AccountsBalancesByAccountIDGetBadRequest Bad Request

swagger:response accountsBalancesByAccountIdGetBadRequest
*/
type AccountsBalancesByAccountIDGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewAccountsBalancesByAccountIDGetBadRequest creates AccountsBalancesByAccountIDGetBadRequest with default headers values
func NewAccountsBalancesByAccountIDGetBadRequest() *AccountsBalancesByAccountIDGetBadRequest {

	return &AccountsBalancesByAccountIDGetBadRequest{}
}

// WithPayload adds the payload to the accounts balances by account Id get bad request response
func (o *AccountsBalancesByAccountIDGetBadRequest) WithPayload(payload *models.TppMessage) *AccountsBalancesByAccountIDGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accounts balances by account Id get bad request response
func (o *AccountsBalancesByAccountIDGetBadRequest) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AccountsBalancesByAccountIDGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AccountsBalancesByAccountIDGetUnauthorizedCode is the HTTP code returned for type AccountsBalancesByAccountIDGetUnauthorized
const AccountsBalancesByAccountIDGetUnauthorizedCode int = 401

/*AccountsBalancesByAccountIDGetUnauthorized Unauthorized

swagger:response accountsBalancesByAccountIdGetUnauthorized
*/
type AccountsBalancesByAccountIDGetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewAccountsBalancesByAccountIDGetUnauthorized creates AccountsBalancesByAccountIDGetUnauthorized with default headers values
func NewAccountsBalancesByAccountIDGetUnauthorized() *AccountsBalancesByAccountIDGetUnauthorized {

	return &AccountsBalancesByAccountIDGetUnauthorized{}
}

// WithPayload adds the payload to the accounts balances by account Id get unauthorized response
func (o *AccountsBalancesByAccountIDGetUnauthorized) WithPayload(payload *models.TppMessage) *AccountsBalancesByAccountIDGetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accounts balances by account Id get unauthorized response
func (o *AccountsBalancesByAccountIDGetUnauthorized) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AccountsBalancesByAccountIDGetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AccountsBalancesByAccountIDGetForbiddenCode is the HTTP code returned for type AccountsBalancesByAccountIDGetForbidden
const AccountsBalancesByAccountIDGetForbiddenCode int = 403

/*AccountsBalancesByAccountIDGetForbidden Forbidden

swagger:response accountsBalancesByAccountIdGetForbidden
*/
type AccountsBalancesByAccountIDGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewAccountsBalancesByAccountIDGetForbidden creates AccountsBalancesByAccountIDGetForbidden with default headers values
func NewAccountsBalancesByAccountIDGetForbidden() *AccountsBalancesByAccountIDGetForbidden {

	return &AccountsBalancesByAccountIDGetForbidden{}
}

// WithPayload adds the payload to the accounts balances by account Id get forbidden response
func (o *AccountsBalancesByAccountIDGetForbidden) WithPayload(payload *models.TppMessage) *AccountsBalancesByAccountIDGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accounts balances by account Id get forbidden response
func (o *AccountsBalancesByAccountIDGetForbidden) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AccountsBalancesByAccountIDGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*AccountsBalancesByAccountIDGetDefault Internal Server Error

swagger:response accountsBalancesByAccountIdGetDefault
*/
type AccountsBalancesByAccountIDGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewAccountsBalancesByAccountIDGetDefault creates AccountsBalancesByAccountIDGetDefault with default headers values
func NewAccountsBalancesByAccountIDGetDefault(code int) *AccountsBalancesByAccountIDGetDefault {
	if code <= 0 {
		code = 500
	}

	return &AccountsBalancesByAccountIDGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the accounts balances by account Id get default response
func (o *AccountsBalancesByAccountIDGetDefault) WithStatusCode(code int) *AccountsBalancesByAccountIDGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the accounts balances by account Id get default response
func (o *AccountsBalancesByAccountIDGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the accounts balances by account Id get default response
func (o *AccountsBalancesByAccountIDGetDefault) WithPayload(payload *models.TppMessage) *AccountsBalancesByAccountIDGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the accounts balances by account Id get default response
func (o *AccountsBalancesByAccountIDGetDefault) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AccountsBalancesByAccountIDGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
