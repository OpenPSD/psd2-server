// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ConsentsStatusByConsentIDGetHandlerFunc turns a function with the right signature into a consents status by consent Id get handler
type ConsentsStatusByConsentIDGetHandlerFunc func(ConsentsStatusByConsentIDGetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConsentsStatusByConsentIDGetHandlerFunc) Handle(params ConsentsStatusByConsentIDGetParams) middleware.Responder {
	return fn(params)
}

// ConsentsStatusByConsentIDGetHandler interface for that can handle valid consents status by consent Id get params
type ConsentsStatusByConsentIDGetHandler interface {
	Handle(ConsentsStatusByConsentIDGetParams) middleware.Responder
}

// NewConsentsStatusByConsentIDGet creates a new http.Handler for the consents status by consent Id get operation
func NewConsentsStatusByConsentIDGet(ctx *middleware.Context, handler ConsentsStatusByConsentIDGetHandler) *ConsentsStatusByConsentIDGet {
	return &ConsentsStatusByConsentIDGet{Context: ctx, Handler: handler}
}

/*ConsentsStatusByConsentIDGet swagger:route GET /consents/{consentId}/status Consent consentsStatusByConsentIdGet

get status of a consent

Reads the transaction status of the addressed consent resource.

*/
type ConsentsStatusByConsentIDGet struct {
	Context *middleware.Context
	Handler ConsentsStatusByConsentIDGetHandler
}

func (o *ConsentsStatusByConsentIDGet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConsentsStatusByConsentIDGetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
