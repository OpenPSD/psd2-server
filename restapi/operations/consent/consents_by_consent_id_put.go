// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ConsentsByConsentIDPutHandlerFunc turns a function with the right signature into a consents by consent Id put handler
type ConsentsByConsentIDPutHandlerFunc func(ConsentsByConsentIDPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConsentsByConsentIDPutHandlerFunc) Handle(params ConsentsByConsentIDPutParams) middleware.Responder {
	return fn(params)
}

// ConsentsByConsentIDPutHandler interface for that can handle valid consents by consent Id put params
type ConsentsByConsentIDPutHandler interface {
	Handle(ConsentsByConsentIDPutParams) middleware.Responder
}

// NewConsentsByConsentIDPut creates a new http.Handler for the consents by consent Id put operation
func NewConsentsByConsentIDPut(ctx *middleware.Context, handler ConsentsByConsentIDPutHandler) *ConsentsByConsentIDPut {
	return &ConsentsByConsentIDPut{Context: ctx, Handler: handler}
}

/*ConsentsByConsentIDPut swagger:route PUT /consents/{consentId} Consent consentsByConsentIdPut

update consent

Updates data on the consent resource, authorises a consent within the Embedded SCA Approach where needed.

*/
type ConsentsByConsentIDPut struct {
	Context *middleware.Context
	Handler ConsentsByConsentIDPutHandler
}

func (o *ConsentsByConsentIDPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConsentsByConsentIDPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
