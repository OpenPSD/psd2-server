// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/openpsd/psd2-server/models"
)

// ConsentsByConsentIDGetOKCode is the HTTP code returned for type ConsentsByConsentIDGetOK
const ConsentsByConsentIDGetOKCode int = 200

/*ConsentsByConsentIDGetOK OK

swagger:response consentsByConsentIdGetOK
*/
type ConsentsByConsentIDGetOK struct {

	/*
	  In: Body
	*/
	Payload *models.ConsentsResponse125 `json:"body,omitempty"`
}

// NewConsentsByConsentIDGetOK creates ConsentsByConsentIDGetOK with default headers values
func NewConsentsByConsentIDGetOK() *ConsentsByConsentIDGetOK {

	return &ConsentsByConsentIDGetOK{}
}

// WithPayload adds the payload to the consents by consent Id get o k response
func (o *ConsentsByConsentIDGetOK) WithPayload(payload *models.ConsentsResponse125) *ConsentsByConsentIDGetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id get o k response
func (o *ConsentsByConsentIDGetOK) SetPayload(payload *models.ConsentsResponse125) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDGetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDGetBadRequestCode is the HTTP code returned for type ConsentsByConsentIDGetBadRequest
const ConsentsByConsentIDGetBadRequestCode int = 400

/*ConsentsByConsentIDGetBadRequest Bad Request

swagger:response consentsByConsentIdGetBadRequest
*/
type ConsentsByConsentIDGetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDGetBadRequest creates ConsentsByConsentIDGetBadRequest with default headers values
func NewConsentsByConsentIDGetBadRequest() *ConsentsByConsentIDGetBadRequest {

	return &ConsentsByConsentIDGetBadRequest{}
}

// WithPayload adds the payload to the consents by consent Id get bad request response
func (o *ConsentsByConsentIDGetBadRequest) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDGetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id get bad request response
func (o *ConsentsByConsentIDGetBadRequest) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDGetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDGetUnauthorizedCode is the HTTP code returned for type ConsentsByConsentIDGetUnauthorized
const ConsentsByConsentIDGetUnauthorizedCode int = 401

/*ConsentsByConsentIDGetUnauthorized Unauthorized

swagger:response consentsByConsentIdGetUnauthorized
*/
type ConsentsByConsentIDGetUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDGetUnauthorized creates ConsentsByConsentIDGetUnauthorized with default headers values
func NewConsentsByConsentIDGetUnauthorized() *ConsentsByConsentIDGetUnauthorized {

	return &ConsentsByConsentIDGetUnauthorized{}
}

// WithPayload adds the payload to the consents by consent Id get unauthorized response
func (o *ConsentsByConsentIDGetUnauthorized) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDGetUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id get unauthorized response
func (o *ConsentsByConsentIDGetUnauthorized) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDGetUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDGetForbiddenCode is the HTTP code returned for type ConsentsByConsentIDGetForbidden
const ConsentsByConsentIDGetForbiddenCode int = 403

/*ConsentsByConsentIDGetForbidden Forbidden

swagger:response consentsByConsentIdGetForbidden
*/
type ConsentsByConsentIDGetForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDGetForbidden creates ConsentsByConsentIDGetForbidden with default headers values
func NewConsentsByConsentIDGetForbidden() *ConsentsByConsentIDGetForbidden {

	return &ConsentsByConsentIDGetForbidden{}
}

// WithPayload adds the payload to the consents by consent Id get forbidden response
func (o *ConsentsByConsentIDGetForbidden) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDGetForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id get forbidden response
func (o *ConsentsByConsentIDGetForbidden) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDGetForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ConsentsByConsentIDGetDefault Internal Server Error

swagger:response consentsByConsentIdGetDefault
*/
type ConsentsByConsentIDGetDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDGetDefault creates ConsentsByConsentIDGetDefault with default headers values
func NewConsentsByConsentIDGetDefault(code int) *ConsentsByConsentIDGetDefault {
	if code <= 0 {
		code = 500
	}

	return &ConsentsByConsentIDGetDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the consents by consent Id get default response
func (o *ConsentsByConsentIDGetDefault) WithStatusCode(code int) *ConsentsByConsentIDGetDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the consents by consent Id get default response
func (o *ConsentsByConsentIDGetDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the consents by consent Id get default response
func (o *ConsentsByConsentIDGetDefault) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDGetDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id get default response
func (o *ConsentsByConsentIDGetDefault) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDGetDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
