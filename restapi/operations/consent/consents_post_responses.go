// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/openpsd/psd2-server/models"
)

// ConsentsPostCreatedCode is the HTTP code returned for type ConsentsPostCreated
const ConsentsPostCreatedCode int = 201

/*ConsentsPostCreated Consent Request was correctly performed.

swagger:response consentsPostCreated
*/
type ConsentsPostCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ConsentsResponse `json:"body,omitempty"`
}

// NewConsentsPostCreated creates ConsentsPostCreated with default headers values
func NewConsentsPostCreated() *ConsentsPostCreated {

	return &ConsentsPostCreated{}
}

// WithPayload adds the payload to the consents post created response
func (o *ConsentsPostCreated) WithPayload(payload *models.ConsentsResponse) *ConsentsPostCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents post created response
func (o *ConsentsPostCreated) SetPayload(payload *models.ConsentsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsPostCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsPostBadRequestCode is the HTTP code returned for type ConsentsPostBadRequest
const ConsentsPostBadRequestCode int = 400

/*ConsentsPostBadRequest Bad Request

swagger:response consentsPostBadRequest
*/
type ConsentsPostBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsPostBadRequest creates ConsentsPostBadRequest with default headers values
func NewConsentsPostBadRequest() *ConsentsPostBadRequest {

	return &ConsentsPostBadRequest{}
}

// WithPayload adds the payload to the consents post bad request response
func (o *ConsentsPostBadRequest) WithPayload(payload *models.TppMessage) *ConsentsPostBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents post bad request response
func (o *ConsentsPostBadRequest) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsPostBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsPostUnauthorizedCode is the HTTP code returned for type ConsentsPostUnauthorized
const ConsentsPostUnauthorizedCode int = 401

/*ConsentsPostUnauthorized Unauthorized

swagger:response consentsPostUnauthorized
*/
type ConsentsPostUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsPostUnauthorized creates ConsentsPostUnauthorized with default headers values
func NewConsentsPostUnauthorized() *ConsentsPostUnauthorized {

	return &ConsentsPostUnauthorized{}
}

// WithPayload adds the payload to the consents post unauthorized response
func (o *ConsentsPostUnauthorized) WithPayload(payload *models.TppMessage) *ConsentsPostUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents post unauthorized response
func (o *ConsentsPostUnauthorized) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsPostUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsPostForbiddenCode is the HTTP code returned for type ConsentsPostForbidden
const ConsentsPostForbiddenCode int = 403

/*ConsentsPostForbidden Forbidden

swagger:response consentsPostForbidden
*/
type ConsentsPostForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsPostForbidden creates ConsentsPostForbidden with default headers values
func NewConsentsPostForbidden() *ConsentsPostForbidden {

	return &ConsentsPostForbidden{}
}

// WithPayload adds the payload to the consents post forbidden response
func (o *ConsentsPostForbidden) WithPayload(payload *models.TppMessage) *ConsentsPostForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents post forbidden response
func (o *ConsentsPostForbidden) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsPostForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ConsentsPostDefault Internal Server Error

swagger:response consentsPostDefault
*/
type ConsentsPostDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsPostDefault creates ConsentsPostDefault with default headers values
func NewConsentsPostDefault(code int) *ConsentsPostDefault {
	if code <= 0 {
		code = 500
	}

	return &ConsentsPostDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the consents post default response
func (o *ConsentsPostDefault) WithStatusCode(code int) *ConsentsPostDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the consents post default response
func (o *ConsentsPostDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the consents post default response
func (o *ConsentsPostDefault) WithPayload(payload *models.TppMessage) *ConsentsPostDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents post default response
func (o *ConsentsPostDefault) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsPostDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
