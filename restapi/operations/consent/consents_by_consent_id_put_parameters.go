// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/openpsd/psd2-server/models"
)

// NewConsentsByConsentIDPutParams creates a new ConsentsByConsentIDPutParams object
// no default values defined in spec.
func NewConsentsByConsentIDPutParams() ConsentsByConsentIDPutParams {

	return ConsentsByConsentIDPutParams{}
}

// ConsentsByConsentIDPutParams contains all the bound params for the consents by consent Id put operation
// typically these are obtained from a http.Request
//
// swagger:parameters ConsentsByConsentIdPut
type ConsentsByConsentIDPutParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Is contained if and only if the "Signature" element is contained in the header of the request.
	  In: header
	*/
	Digest *string
	/*Might be mandated in the ASPSP's documentation. Only used in a corporate context.
	  In: header
	*/
	PSUCorporateID *string
	/*Might be mandated in the ASPSPs documentation. Only used in a corporate context.
	  In: header
	*/
	PSUCorporateIDType *string
	/*Might be mandated in the ASPSP's documentation, if OAuth is not chosen as Pre-Step.
	  In: header
	*/
	PSUID *string
	/*Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.
	  In: header
	*/
	PSUIDType *string
	/*A signature of the request by the TPP on application level. This might be mandated by ASPSP.
	  In: header
	*/
	Signature *string
	/*The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.
	  In: header
	*/
	TPPSignatureCertificate *string
	/*ID of the request, unique to the call, as determined by the initiating party.
	  Required: true
	  In: header
	*/
	XRequestID strfmt.UUID
	/*
	  In: body
	*/
	Body *models.ConsentsRequest144
	/*ID of the corresponding consent object as returned by an Account Information Consent Request
	  Required: true
	  In: path
	*/
	ConsentID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewConsentsByConsentIDPutParams() beforehand.
func (o *ConsentsByConsentIDPutParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindDigest(r.Header[http.CanonicalHeaderKey("Digest")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindPSUCorporateID(r.Header[http.CanonicalHeaderKey("PSU-Corporate-ID")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindPSUCorporateIDType(r.Header[http.CanonicalHeaderKey("PSU-Corporate-ID-Type")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindPSUID(r.Header[http.CanonicalHeaderKey("PSU-ID")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindPSUIDType(r.Header[http.CanonicalHeaderKey("PSU-ID-Type")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindSignature(r.Header[http.CanonicalHeaderKey("Signature")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindTPPSignatureCertificate(r.Header[http.CanonicalHeaderKey("TPP-Signature-Certificate")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-ID")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ConsentsRequest144
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {

			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	}
	rConsentID, rhkConsentID, _ := route.Params.GetOK("consentId")
	if err := o.bindConsentID(rConsentID, rhkConsentID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ConsentsByConsentIDPutParams) bindDigest(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Digest = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindPSUCorporateID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PSUCorporateID = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindPSUCorporateIDType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PSUCorporateIDType = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindPSUID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PSUID = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindPSUIDType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.PSUIDType = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindSignature(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Signature = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindTPPSignatureCertificate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TPPSignatureCertificate = &raw

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Request-ID", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Request-ID", "header", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("X-Request-ID", "header", "strfmt.UUID", raw)
	}
	o.XRequestID = *(value.(*strfmt.UUID))

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

func (o *ConsentsByConsentIDPutParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.FormatOf("X-Request-ID", "header", "uuid", o.XRequestID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *ConsentsByConsentIDPutParams) bindConsentID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ConsentID = raw

	return nil
}
