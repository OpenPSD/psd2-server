// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/openpsd/psd2-server/models"
)

// ConsentsByConsentIDPutCreatedCode is the HTTP code returned for type ConsentsByConsentIDPutCreated
const ConsentsByConsentIDPutCreatedCode int = 201

/*ConsentsByConsentIDPutCreated OK

swagger:response consentsByConsentIdPutCreated
*/
type ConsentsByConsentIDPutCreated struct {

	/*
	  In: Body
	*/
	Payload *models.ConsentsResponse146 `json:"body,omitempty"`
}

// NewConsentsByConsentIDPutCreated creates ConsentsByConsentIDPutCreated with default headers values
func NewConsentsByConsentIDPutCreated() *ConsentsByConsentIDPutCreated {

	return &ConsentsByConsentIDPutCreated{}
}

// WithPayload adds the payload to the consents by consent Id put created response
func (o *ConsentsByConsentIDPutCreated) WithPayload(payload *models.ConsentsResponse146) *ConsentsByConsentIDPutCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id put created response
func (o *ConsentsByConsentIDPutCreated) SetPayload(payload *models.ConsentsResponse146) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDPutCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDPutBadRequestCode is the HTTP code returned for type ConsentsByConsentIDPutBadRequest
const ConsentsByConsentIDPutBadRequestCode int = 400

/*ConsentsByConsentIDPutBadRequest Bad Request

swagger:response consentsByConsentIdPutBadRequest
*/
type ConsentsByConsentIDPutBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDPutBadRequest creates ConsentsByConsentIDPutBadRequest with default headers values
func NewConsentsByConsentIDPutBadRequest() *ConsentsByConsentIDPutBadRequest {

	return &ConsentsByConsentIDPutBadRequest{}
}

// WithPayload adds the payload to the consents by consent Id put bad request response
func (o *ConsentsByConsentIDPutBadRequest) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDPutBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id put bad request response
func (o *ConsentsByConsentIDPutBadRequest) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDPutBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDPutUnauthorizedCode is the HTTP code returned for type ConsentsByConsentIDPutUnauthorized
const ConsentsByConsentIDPutUnauthorizedCode int = 401

/*ConsentsByConsentIDPutUnauthorized Unauthorized

swagger:response consentsByConsentIdPutUnauthorized
*/
type ConsentsByConsentIDPutUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDPutUnauthorized creates ConsentsByConsentIDPutUnauthorized with default headers values
func NewConsentsByConsentIDPutUnauthorized() *ConsentsByConsentIDPutUnauthorized {

	return &ConsentsByConsentIDPutUnauthorized{}
}

// WithPayload adds the payload to the consents by consent Id put unauthorized response
func (o *ConsentsByConsentIDPutUnauthorized) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDPutUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id put unauthorized response
func (o *ConsentsByConsentIDPutUnauthorized) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDPutUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ConsentsByConsentIDPutForbiddenCode is the HTTP code returned for type ConsentsByConsentIDPutForbidden
const ConsentsByConsentIDPutForbiddenCode int = 403

/*ConsentsByConsentIDPutForbidden Forbidden

swagger:response consentsByConsentIdPutForbidden
*/
type ConsentsByConsentIDPutForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDPutForbidden creates ConsentsByConsentIDPutForbidden with default headers values
func NewConsentsByConsentIDPutForbidden() *ConsentsByConsentIDPutForbidden {

	return &ConsentsByConsentIDPutForbidden{}
}

// WithPayload adds the payload to the consents by consent Id put forbidden response
func (o *ConsentsByConsentIDPutForbidden) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDPutForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id put forbidden response
func (o *ConsentsByConsentIDPutForbidden) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDPutForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ConsentsByConsentIDPutDefault Internal Server Error

swagger:response consentsByConsentIdPutDefault
*/
type ConsentsByConsentIDPutDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.TppMessage `json:"body,omitempty"`
}

// NewConsentsByConsentIDPutDefault creates ConsentsByConsentIDPutDefault with default headers values
func NewConsentsByConsentIDPutDefault(code int) *ConsentsByConsentIDPutDefault {
	if code <= 0 {
		code = 500
	}

	return &ConsentsByConsentIDPutDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the consents by consent Id put default response
func (o *ConsentsByConsentIDPutDefault) WithStatusCode(code int) *ConsentsByConsentIDPutDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the consents by consent Id put default response
func (o *ConsentsByConsentIDPutDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the consents by consent Id put default response
func (o *ConsentsByConsentIDPutDefault) WithPayload(payload *models.TppMessage) *ConsentsByConsentIDPutDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the consents by consent Id put default response
func (o *ConsentsByConsentIDPutDefault) SetPayload(payload *models.TppMessage) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ConsentsByConsentIDPutDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
