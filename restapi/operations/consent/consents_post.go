// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// ConsentsPostHandlerFunc turns a function with the right signature into a consents post handler
type ConsentsPostHandlerFunc func(ConsentsPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConsentsPostHandlerFunc) Handle(params ConsentsPostParams) middleware.Responder {
	return fn(params)
}

// ConsentsPostHandler interface for that can handle valid consents post params
type ConsentsPostHandler interface {
	Handle(ConsentsPostParams) middleware.Responder
}

// NewConsentsPost creates a new http.Handler for the consents post operation
func NewConsentsPost(ctx *middleware.Context, handler ConsentsPostHandler) *ConsentsPost {
	return &ConsentsPost{Context: ctx, Handler: handler}
}

/*ConsentsPost swagger:route POST /consents Consent consentsPost

create a consent

Creates a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts must be addressed explicitly in the method as parameters.

*/
type ConsentsPost struct {
	Context *middleware.Context
	Handler ConsentsPostHandler
}

func (o *ConsentsPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConsentsPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
