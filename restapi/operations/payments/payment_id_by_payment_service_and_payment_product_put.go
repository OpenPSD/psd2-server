// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PaymentIDByPaymentServiceAndPaymentProductPutHandlerFunc turns a function with the right signature into a payment Id by payment service and payment product put handler
type PaymentIDByPaymentServiceAndPaymentProductPutHandlerFunc func(PaymentIDByPaymentServiceAndPaymentProductPutParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PaymentIDByPaymentServiceAndPaymentProductPutHandlerFunc) Handle(params PaymentIDByPaymentServiceAndPaymentProductPutParams) middleware.Responder {
	return fn(params)
}

// PaymentIDByPaymentServiceAndPaymentProductPutHandler interface for that can handle valid payment Id by payment service and payment product put params
type PaymentIDByPaymentServiceAndPaymentProductPutHandler interface {
	Handle(PaymentIDByPaymentServiceAndPaymentProductPutParams) middleware.Responder
}

// NewPaymentIDByPaymentServiceAndPaymentProductPut creates a new http.Handler for the payment Id by payment service and payment product put operation
func NewPaymentIDByPaymentServiceAndPaymentProductPut(ctx *middleware.Context, handler PaymentIDByPaymentServiceAndPaymentProductPutHandler) *PaymentIDByPaymentServiceAndPaymentProductPut {
	return &PaymentIDByPaymentServiceAndPaymentProductPut{Context: ctx, Handler: handler}
}

/*PaymentIDByPaymentServiceAndPaymentProductPut swagger:route PUT /{payment-service}/{payment-product}/{paymentId} payments paymentIdByPaymentServiceAndPaymentProductPut

update payment

Updates data on the payment resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.

*/
type PaymentIDByPaymentServiceAndPaymentProductPut struct {
	Context *middleware.Context
	Handler PaymentIDByPaymentServiceAndPaymentProductPutHandler
}

func (o *PaymentIDByPaymentServiceAndPaymentProductPut) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPaymentIDByPaymentServiceAndPaymentProductPutParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
