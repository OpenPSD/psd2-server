// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/openpsd/psd2-server/restapi/operations/account"
	"github.com/openpsd/psd2-server/restapi/operations/consent"
	"github.com/openpsd/psd2-server/restapi/operations/funds"
	"github.com/openpsd/psd2-server/restapi/operations/payments"
)

// NewOpenpsdAPI creates a new Openpsd instance
func NewOpenpsdAPI(spec *loads.Document) *OpenpsdAPI {
	return &OpenpsdAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		AccountAccountsBalancesByAccountIDGetHandler: account.AccountsBalancesByAccountIDGetHandlerFunc(func(params account.AccountsBalancesByAccountIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountAccountsBalancesByAccountIDGet has not yet been implemented")
		}),
		AccountAccountsByAccountIDGetHandler: account.AccountsByAccountIDGetHandlerFunc(func(params account.AccountsByAccountIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountAccountsByAccountIDGet has not yet been implemented")
		}),
		AccountAccountsGetHandler: account.AccountsGetHandlerFunc(func(params account.AccountsGetParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountAccountsGet has not yet been implemented")
		}),
		AccountAccountsTransactionsByAccountIDAndResourceIDGetHandler: account.AccountsTransactionsByAccountIDAndResourceIDGetHandlerFunc(func(params account.AccountsTransactionsByAccountIDAndResourceIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountAccountsTransactionsByAccountIDAndResourceIDGet has not yet been implemented")
		}),
		AccountAccountsTransactionsByAccountIDGetHandler: account.AccountsTransactionsByAccountIDGetHandlerFunc(func(params account.AccountsTransactionsByAccountIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation AccountAccountsTransactionsByAccountIDGet has not yet been implemented")
		}),
		PaymentsBulkPaymentsByPaymentProductPostHandler: payments.BulkPaymentsByPaymentProductPostHandlerFunc(func(params payments.BulkPaymentsByPaymentProductPostParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsBulkPaymentsByPaymentProductPost has not yet been implemented")
		}),
		ConsentConsentsByConsentIDDeleteHandler: consent.ConsentsByConsentIDDeleteHandlerFunc(func(params consent.ConsentsByConsentIDDeleteParams) middleware.Responder {
			return middleware.NotImplemented("operation ConsentConsentsByConsentIDDelete has not yet been implemented")
		}),
		ConsentConsentsByConsentIDGetHandler: consent.ConsentsByConsentIDGetHandlerFunc(func(params consent.ConsentsByConsentIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation ConsentConsentsByConsentIDGet has not yet been implemented")
		}),
		ConsentConsentsByConsentIDPutHandler: consent.ConsentsByConsentIDPutHandlerFunc(func(params consent.ConsentsByConsentIDPutParams) middleware.Responder {
			return middleware.NotImplemented("operation ConsentConsentsByConsentIDPut has not yet been implemented")
		}),
		ConsentConsentsPostHandler: consent.ConsentsPostHandlerFunc(func(params consent.ConsentsPostParams) middleware.Responder {
			return middleware.NotImplemented("operation ConsentConsentsPost has not yet been implemented")
		}),
		ConsentConsentsStatusByConsentIDGetHandler: consent.ConsentsStatusByConsentIDGetHandlerFunc(func(params consent.ConsentsStatusByConsentIDGetParams) middleware.Responder {
			return middleware.NotImplemented("operation ConsentConsentsStatusByConsentIDGet has not yet been implemented")
		}),
		FundsFundsConfirmationsPostHandler: funds.FundsConfirmationsPostHandlerFunc(func(params funds.FundsConfirmationsPostParams) middleware.Responder {
			return middleware.NotImplemented("operation FundsFundsConfirmationsPost has not yet been implemented")
		}),
		PaymentsPaymentIDByPaymentServiceAndPaymentProductGetHandler: payments.PaymentIDByPaymentServiceAndPaymentProductGetHandlerFunc(func(params payments.PaymentIDByPaymentServiceAndPaymentProductGetParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsPaymentIDByPaymentServiceAndPaymentProductGet has not yet been implemented")
		}),
		PaymentsPaymentIDByPaymentServiceAndPaymentProductPutHandler: payments.PaymentIDByPaymentServiceAndPaymentProductPutHandlerFunc(func(params payments.PaymentIDByPaymentServiceAndPaymentProductPutParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsPaymentIDByPaymentServiceAndPaymentProductPut has not yet been implemented")
		}),
		PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGetHandler: payments.PaymentIDStatusByPaymentServiceAndPaymentProductGetHandlerFunc(func(params payments.PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGet has not yet been implemented")
		}),
		PaymentsPaymentsByPaymentProductPostHandler: payments.PaymentsByPaymentProductPostHandlerFunc(func(params payments.PaymentsByPaymentProductPostParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsPaymentsByPaymentProductPost has not yet been implemented")
		}),
		PaymentsPeriodicPaymentsByPaymentProductPostHandler: payments.PeriodicPaymentsByPaymentProductPostHandlerFunc(func(params payments.PeriodicPaymentsByPaymentProductPostParams) middleware.Responder {
			return middleware.NotImplemented("operation PaymentsPeriodicPaymentsByPaymentProductPost has not yet been implemented")
		}),
	}
}

/*OpenpsdAPI PSD2 API based on the Berlin Group specs
 */
type OpenpsdAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implemention in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// AccountAccountsBalancesByAccountIDGetHandler sets the operation handler for the accounts balances by account Id get operation
	AccountAccountsBalancesByAccountIDGetHandler account.AccountsBalancesByAccountIDGetHandler
	// AccountAccountsByAccountIDGetHandler sets the operation handler for the accounts by account Id get operation
	AccountAccountsByAccountIDGetHandler account.AccountsByAccountIDGetHandler
	// AccountAccountsGetHandler sets the operation handler for the accounts get operation
	AccountAccountsGetHandler account.AccountsGetHandler
	// AccountAccountsTransactionsByAccountIDAndResourceIDGetHandler sets the operation handler for the accounts transactions by account Id and resource Id get operation
	AccountAccountsTransactionsByAccountIDAndResourceIDGetHandler account.AccountsTransactionsByAccountIDAndResourceIDGetHandler
	// AccountAccountsTransactionsByAccountIDGetHandler sets the operation handler for the accounts transactions by account Id get operation
	AccountAccountsTransactionsByAccountIDGetHandler account.AccountsTransactionsByAccountIDGetHandler
	// PaymentsBulkPaymentsByPaymentProductPostHandler sets the operation handler for the bulk payments by payment product post operation
	PaymentsBulkPaymentsByPaymentProductPostHandler payments.BulkPaymentsByPaymentProductPostHandler
	// ConsentConsentsByConsentIDDeleteHandler sets the operation handler for the consents by consent Id delete operation
	ConsentConsentsByConsentIDDeleteHandler consent.ConsentsByConsentIDDeleteHandler
	// ConsentConsentsByConsentIDGetHandler sets the operation handler for the consents by consent Id get operation
	ConsentConsentsByConsentIDGetHandler consent.ConsentsByConsentIDGetHandler
	// ConsentConsentsByConsentIDPutHandler sets the operation handler for the consents by consent Id put operation
	ConsentConsentsByConsentIDPutHandler consent.ConsentsByConsentIDPutHandler
	// ConsentConsentsPostHandler sets the operation handler for the consents post operation
	ConsentConsentsPostHandler consent.ConsentsPostHandler
	// ConsentConsentsStatusByConsentIDGetHandler sets the operation handler for the consents status by consent Id get operation
	ConsentConsentsStatusByConsentIDGetHandler consent.ConsentsStatusByConsentIDGetHandler
	// FundsFundsConfirmationsPostHandler sets the operation handler for the funds confirmations post operation
	FundsFundsConfirmationsPostHandler funds.FundsConfirmationsPostHandler
	// PaymentsPaymentIDByPaymentServiceAndPaymentProductGetHandler sets the operation handler for the payment Id by payment service and payment product get operation
	PaymentsPaymentIDByPaymentServiceAndPaymentProductGetHandler payments.PaymentIDByPaymentServiceAndPaymentProductGetHandler
	// PaymentsPaymentIDByPaymentServiceAndPaymentProductPutHandler sets the operation handler for the payment Id by payment service and payment product put operation
	PaymentsPaymentIDByPaymentServiceAndPaymentProductPutHandler payments.PaymentIDByPaymentServiceAndPaymentProductPutHandler
	// PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGetHandler sets the operation handler for the payment Id status by payment service and payment product get operation
	PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGetHandler payments.PaymentIDStatusByPaymentServiceAndPaymentProductGetHandler
	// PaymentsPaymentsByPaymentProductPostHandler sets the operation handler for the payments by payment product post operation
	PaymentsPaymentsByPaymentProductPostHandler payments.PaymentsByPaymentProductPostHandler
	// PaymentsPeriodicPaymentsByPaymentProductPostHandler sets the operation handler for the periodic payments by payment product post operation
	PaymentsPeriodicPaymentsByPaymentProductPostHandler payments.PeriodicPaymentsByPaymentProductPostHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *OpenpsdAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *OpenpsdAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *OpenpsdAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *OpenpsdAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *OpenpsdAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *OpenpsdAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *OpenpsdAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the OpenpsdAPI
func (o *OpenpsdAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.AccountAccountsBalancesByAccountIDGetHandler == nil {
		unregistered = append(unregistered, "account.AccountsBalancesByAccountIDGetHandler")
	}

	if o.AccountAccountsByAccountIDGetHandler == nil {
		unregistered = append(unregistered, "account.AccountsByAccountIDGetHandler")
	}

	if o.AccountAccountsGetHandler == nil {
		unregistered = append(unregistered, "account.AccountsGetHandler")
	}

	if o.AccountAccountsTransactionsByAccountIDAndResourceIDGetHandler == nil {
		unregistered = append(unregistered, "account.AccountsTransactionsByAccountIDAndResourceIDGetHandler")
	}

	if o.AccountAccountsTransactionsByAccountIDGetHandler == nil {
		unregistered = append(unregistered, "account.AccountsTransactionsByAccountIDGetHandler")
	}

	if o.PaymentsBulkPaymentsByPaymentProductPostHandler == nil {
		unregistered = append(unregistered, "payments.BulkPaymentsByPaymentProductPostHandler")
	}

	if o.ConsentConsentsByConsentIDDeleteHandler == nil {
		unregistered = append(unregistered, "consent.ConsentsByConsentIDDeleteHandler")
	}

	if o.ConsentConsentsByConsentIDGetHandler == nil {
		unregistered = append(unregistered, "consent.ConsentsByConsentIDGetHandler")
	}

	if o.ConsentConsentsByConsentIDPutHandler == nil {
		unregistered = append(unregistered, "consent.ConsentsByConsentIDPutHandler")
	}

	if o.ConsentConsentsPostHandler == nil {
		unregistered = append(unregistered, "consent.ConsentsPostHandler")
	}

	if o.ConsentConsentsStatusByConsentIDGetHandler == nil {
		unregistered = append(unregistered, "consent.ConsentsStatusByConsentIDGetHandler")
	}

	if o.FundsFundsConfirmationsPostHandler == nil {
		unregistered = append(unregistered, "funds.FundsConfirmationsPostHandler")
	}

	if o.PaymentsPaymentIDByPaymentServiceAndPaymentProductGetHandler == nil {
		unregistered = append(unregistered, "payments.PaymentIDByPaymentServiceAndPaymentProductGetHandler")
	}

	if o.PaymentsPaymentIDByPaymentServiceAndPaymentProductPutHandler == nil {
		unregistered = append(unregistered, "payments.PaymentIDByPaymentServiceAndPaymentProductPutHandler")
	}

	if o.PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGetHandler == nil {
		unregistered = append(unregistered, "payments.PaymentIDStatusByPaymentServiceAndPaymentProductGetHandler")
	}

	if o.PaymentsPaymentsByPaymentProductPostHandler == nil {
		unregistered = append(unregistered, "payments.PaymentsByPaymentProductPostHandler")
	}

	if o.PaymentsPeriodicPaymentsByPaymentProductPostHandler == nil {
		unregistered = append(unregistered, "payments.PeriodicPaymentsByPaymentProductPostHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *OpenpsdAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *OpenpsdAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *OpenpsdAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *OpenpsdAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *OpenpsdAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *OpenpsdAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the openpsd API
func (o *OpenpsdAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *OpenpsdAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{account-id}/balances"] = account.NewAccountsBalancesByAccountIDGet(o.context, o.AccountAccountsBalancesByAccountIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{account-id}"] = account.NewAccountsByAccountIDGet(o.context, o.AccountAccountsByAccountIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts"] = account.NewAccountsGet(o.context, o.AccountAccountsGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{account-id}/transactions/{resourceId}"] = account.NewAccountsTransactionsByAccountIDAndResourceIDGet(o.context, o.AccountAccountsTransactionsByAccountIDAndResourceIDGetHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/accounts/{account-id}/transactions"] = account.NewAccountsTransactionsByAccountIDGet(o.context, o.AccountAccountsTransactionsByAccountIDGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/bulk-payments/{payment-product}"] = payments.NewBulkPaymentsByPaymentProductPost(o.context, o.PaymentsBulkPaymentsByPaymentProductPostHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/consents/{consentId}"] = consent.NewConsentsByConsentIDDelete(o.context, o.ConsentConsentsByConsentIDDeleteHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/consents/{consentId}"] = consent.NewConsentsByConsentIDGet(o.context, o.ConsentConsentsByConsentIDGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/consents/{consentId}"] = consent.NewConsentsByConsentIDPut(o.context, o.ConsentConsentsByConsentIDPutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/consents"] = consent.NewConsentsPost(o.context, o.ConsentConsentsPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/consents/{consentId}/status"] = consent.NewConsentsStatusByConsentIDGet(o.context, o.ConsentConsentsStatusByConsentIDGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/funds-confirmations"] = funds.NewFundsConfirmationsPost(o.context, o.FundsFundsConfirmationsPostHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{payment-service}/{payment-product}/{paymentId}"] = payments.NewPaymentIDByPaymentServiceAndPaymentProductGet(o.context, o.PaymentsPaymentIDByPaymentServiceAndPaymentProductGetHandler)

	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/{payment-service}/{payment-product}/{paymentId}"] = payments.NewPaymentIDByPaymentServiceAndPaymentProductPut(o.context, o.PaymentsPaymentIDByPaymentServiceAndPaymentProductPutHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/{payment-service}/{payment-product}/{paymentId}/status"] = payments.NewPaymentIDStatusByPaymentServiceAndPaymentProductGet(o.context, o.PaymentsPaymentIDStatusByPaymentServiceAndPaymentProductGetHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/payments/{payment-product}"] = payments.NewPaymentsByPaymentProductPost(o.context, o.PaymentsPaymentsByPaymentProductPostHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/periodic-payments/{payment-product}"] = payments.NewPeriodicPaymentsByPaymentProductPost(o.context, o.PaymentsPeriodicPaymentsByPaymentProductPostHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *OpenpsdAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *OpenpsdAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *OpenpsdAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *OpenpsdAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
