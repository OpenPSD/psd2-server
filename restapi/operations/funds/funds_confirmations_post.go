// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package funds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// FundsConfirmationsPostHandlerFunc turns a function with the right signature into a funds confirmations post handler
type FundsConfirmationsPostHandlerFunc func(FundsConfirmationsPostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn FundsConfirmationsPostHandlerFunc) Handle(params FundsConfirmationsPostParams) middleware.Responder {
	return fn(params)
}

// FundsConfirmationsPostHandler interface for that can handle valid funds confirmations post params
type FundsConfirmationsPostHandler interface {
	Handle(FundsConfirmationsPostParams) middleware.Responder
}

// NewFundsConfirmationsPost creates a new http.Handler for the funds confirmations post operation
func NewFundsConfirmationsPost(ctx *middleware.Context, handler FundsConfirmationsPostHandler) *FundsConfirmationsPost {
	return &FundsConfirmationsPost{Context: ctx, Handler: handler}
}

/*FundsConfirmationsPost swagger:route POST /funds-confirmations Funds fundsConfirmationsPost

check funds

Checks whether funds are available for a payment transaction on an account linked with a given tuple cardissuer/cardnumber, or an IBAN and TPP respectively

*/
type FundsConfirmationsPost struct {
	Context *middleware.Context
	Handler FundsConfirmationsPostHandler
}

func (o *FundsConfirmationsPost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewFundsConfirmationsPostParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
