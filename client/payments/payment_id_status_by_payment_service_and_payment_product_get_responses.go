// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/openpsd/psd2-server/models"
)

// PaymentIDStatusByPaymentServiceAndPaymentProductGetReader is a Reader for the PaymentIDStatusByPaymentServiceAndPaymentProductGet structure.
type PaymentIDStatusByPaymentServiceAndPaymentProductGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPaymentIDStatusByPaymentServiceAndPaymentProductGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewPaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewPaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewPaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPaymentIDStatusByPaymentServiceAndPaymentProductGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetOK creates a PaymentIDStatusByPaymentServiceAndPaymentProductGetOK with default headers values
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetOK() *PaymentIDStatusByPaymentServiceAndPaymentProductGetOK {
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetOK{}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetOK handles this case with default header values.

OK
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetOK struct {
	Payload *models.PaymentidStatusResponse
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetOK) Error() string {
	return fmt.Sprintf("[GET /{payment-service}/{payment-product}/{paymentId}/status][%d] paymentIdStatusByPaymentServiceAndPaymentProductGetOK  %+v", 200, o.Payload)
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaymentidStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest creates a PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest with default headers values
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest() *PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest {
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest{}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest handles this case with default header values.

Bad Request
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest struct {
	Payload *models.TppMessage
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /{payment-service}/{payment-product}/{paymentId}/status][%d] paymentIdStatusByPaymentServiceAndPaymentProductGetBadRequest  %+v", 400, o.Payload)
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized creates a PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized with default headers values
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized() *PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized {
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized{}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized handles this case with default header values.

Unauthorized
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized struct {
	Payload *models.TppMessage
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /{payment-service}/{payment-product}/{paymentId}/status][%d] paymentIdStatusByPaymentServiceAndPaymentProductGetUnauthorized  %+v", 401, o.Payload)
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden creates a PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden with default headers values
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden() *PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden {
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden{}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden handles this case with default header values.

Forbidden
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden struct {
	Payload *models.TppMessage
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden) Error() string {
	return fmt.Sprintf("[GET /{payment-service}/{payment-product}/{paymentId}/status][%d] paymentIdStatusByPaymentServiceAndPaymentProductGetForbidden  %+v", 403, o.Payload)
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetDefault creates a PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault with default headers values
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetDefault(code int) *PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault {
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault{
		_statusCode: code,
	}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault handles this case with default header values.

Internal Server Error
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault struct {
	_statusCode int

	Payload *models.TppMessage
}

// Code gets the status code for the payment Id status by payment service and payment product get default response
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault) Code() int {
	return o._statusCode
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault) Error() string {
	return fmt.Sprintf("[GET /{payment-service}/{payment-product}/{paymentId}/status][%d] PaymentIdStatusByPaymentServiceAndPaymentProductGet default  %+v", o._statusCode, o.Payload)
}

func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
