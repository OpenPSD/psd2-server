// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParams creates a new PaymentIDStatusByPaymentServiceAndPaymentProductGetParams object
// with the default values initialized.
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParams() *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	var ()
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithTimeout creates a new PaymentIDStatusByPaymentServiceAndPaymentProductGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithTimeout(timeout time.Duration) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	var ()
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetParams{

		timeout: timeout,
	}
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithContext creates a new PaymentIDStatusByPaymentServiceAndPaymentProductGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithContext(ctx context.Context) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	var ()
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetParams{

		Context: ctx,
	}
}

// NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithHTTPClient creates a new PaymentIDStatusByPaymentServiceAndPaymentProductGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParamsWithHTTPClient(client *http.Client) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	var ()
	return &PaymentIDStatusByPaymentServiceAndPaymentProductGetParams{
		HTTPClient: client,
	}
}

/*PaymentIDStatusByPaymentServiceAndPaymentProductGetParams contains all the parameters to send to the API endpoint
for the payment Id status by payment service and payment product get operation typically these are written to a http.Request
*/
type PaymentIDStatusByPaymentServiceAndPaymentProductGetParams struct {

	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*Digest
	  Is contained if and only if the "Signature" element is contained in the header of the request.

	*/
	Digest *string
	/*Signature
	  A signature of the request by the TPP on application level. This might be mandated by ASPSP.

	*/
	Signature *string
	/*TPPSignatureCertificate
	  The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.

	*/
	TPPSignatureCertificate *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*PaymentProduct
	  The addressed payment product, e.g. SCT. The default list of products supported in this standard is, pain.001-sepa-credit-transfers, pain.001-instant-sepa-credit-transfers, pain.001-target-2-payments or pain.001-cross-border-credit-transfers. Further products might be published by the ASPSP within its XS2A documentation.

	*/
	PaymentProduct string
	/*PaymentService
	  The payment service to use.

	*/
	PaymentService string
	/*PaymentID
	  payment Id

	*/
	PaymentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithTimeout(timeout time.Duration) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithContext(ctx context.Context) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithHTTPClient(client *http.Client) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithAuthorization(authorization *string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithDigest adds the digest to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithDigest(digest *string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithSignature adds the signature to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithSignature(signature *string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithTPPSignatureCertificate adds the tPPSignatureCertificate to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithTPPSignatureCertificate(tPPSignatureCertificate *string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetTPPSignatureCertificate(tPPSignatureCertificate)
	return o
}

// SetTPPSignatureCertificate adds the tPPSignatureCertificate to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetTPPSignatureCertificate(tPPSignatureCertificate *string) {
	o.TPPSignatureCertificate = tPPSignatureCertificate
}

// WithXRequestID adds the xRequestID to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithXRequestID(xRequestID strfmt.UUID) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithPaymentProduct adds the paymentProduct to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithPaymentProduct(paymentProduct string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetPaymentProduct(paymentProduct)
	return o
}

// SetPaymentProduct adds the paymentProduct to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetPaymentProduct(paymentProduct string) {
	o.PaymentProduct = paymentProduct
}

// WithPaymentService adds the paymentService to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithPaymentService(paymentService string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetPaymentService(paymentService)
	return o
}

// SetPaymentService adds the paymentService to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetPaymentService(paymentService string) {
	o.PaymentService = paymentService
}

// WithPaymentID adds the paymentID to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WithPaymentID(paymentID string) *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams {
	o.SetPaymentID(paymentID)
	return o
}

// SetPaymentID adds the paymentId to the payment Id status by payment service and payment product get params
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) SetPaymentID(paymentID string) {
	o.PaymentID = paymentID
}

// WriteToRequest writes these params to a swagger request
func (o *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	if o.Digest != nil {

		// header param Digest
		if err := r.SetHeaderParam("Digest", *o.Digest); err != nil {
			return err
		}

	}

	if o.Signature != nil {

		// header param Signature
		if err := r.SetHeaderParam("Signature", *o.Signature); err != nil {
			return err
		}

	}

	if o.TPPSignatureCertificate != nil {

		// header param TPP-Signature-Certificate
		if err := r.SetHeaderParam("TPP-Signature-Certificate", *o.TPPSignatureCertificate); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	// path param payment-product
	if err := r.SetPathParam("payment-product", o.PaymentProduct); err != nil {
		return err
	}

	// path param payment-service
	if err := r.SetPathParam("payment-service", o.PaymentService); err != nil {
		return err
	}

	// path param paymentId
	if err := r.SetPathParam("paymentId", o.PaymentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
