// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/openpsd/psd2-server/models"
)

// NewPeriodicPaymentsByPaymentProductPostParams creates a new PeriodicPaymentsByPaymentProductPostParams object
// with the default values initialized.
func NewPeriodicPaymentsByPaymentProductPostParams() *PeriodicPaymentsByPaymentProductPostParams {
	var ()
	return &PeriodicPaymentsByPaymentProductPostParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPeriodicPaymentsByPaymentProductPostParamsWithTimeout creates a new PeriodicPaymentsByPaymentProductPostParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPeriodicPaymentsByPaymentProductPostParamsWithTimeout(timeout time.Duration) *PeriodicPaymentsByPaymentProductPostParams {
	var ()
	return &PeriodicPaymentsByPaymentProductPostParams{

		timeout: timeout,
	}
}

// NewPeriodicPaymentsByPaymentProductPostParamsWithContext creates a new PeriodicPaymentsByPaymentProductPostParams object
// with the default values initialized, and the ability to set a context for a request
func NewPeriodicPaymentsByPaymentProductPostParamsWithContext(ctx context.Context) *PeriodicPaymentsByPaymentProductPostParams {
	var ()
	return &PeriodicPaymentsByPaymentProductPostParams{

		Context: ctx,
	}
}

// NewPeriodicPaymentsByPaymentProductPostParamsWithHTTPClient creates a new PeriodicPaymentsByPaymentProductPostParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPeriodicPaymentsByPaymentProductPostParamsWithHTTPClient(client *http.Client) *PeriodicPaymentsByPaymentProductPostParams {
	var ()
	return &PeriodicPaymentsByPaymentProductPostParams{
		HTTPClient: client,
	}
}

/*PeriodicPaymentsByPaymentProductPostParams contains all the parameters to send to the API endpoint
for the periodic payments by payment product post operation typically these are written to a http.Request
*/
type PeriodicPaymentsByPaymentProductPostParams struct {

	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*ConsentID
	  Shall be contained since "Establish Consent Transaction" was performed via this API before.

	*/
	ConsentID string
	/*ContentType
	  Content-Type

	*/
	ContentType string
	/*Digest
	  Is contained if and only if the "Signature" element is contained in the header of the request.

	*/
	Digest *string
	/*PSUCorporateID
	  Might be mandated in the ASPSP's documentation. Only used in a corporate context.

	*/
	PSUCorporateID *string
	/*PSUCorporateIDType
	  Might be mandated in the ASPSPs documentation. Only used in a corporate context.

	*/
	PSUCorporateIDType *string
	/*PSUID
	  Might be mandated in the ASPSP's documentation, if OAuth is not chosen as Pre-Step.

	*/
	PSUID *string
	/*PSUIDType
	  Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.

	*/
	PSUIDType *string
	/*PSUIPAddress
	  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP.

	*/
	PSUipAddress string
	/*Signature
	  A signature of the request by the TPP on application level. This might be mandated by ASPSP.

	*/
	Signature *string
	/*TPPNokRedirectURI*/
	TPPNokRedirectURI *string
	/*TPPRedirectPreferred
	  If it equals "true", the TPP prefers a redirect over an embedded SCA approach. If it equals "false", the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU.

	*/
	TPPRedirectPreferred *bool
	/*TPPRedirectURI
	  URI of the TPP, where the transaction flow shall be redirected to after a Redirect. Mandatory for the SCA OAuth Approach.

	*/
	TPPRedirectURI *string
	/*TPPSignatureCertificate
	  The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.

	*/
	TPPSignatureCertificate *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*Body*/
	Body *models.PeriodicPaymentsRequest
	/*PaymentProduct
	  The addressed payment product, e.g. SCT. The default list of products supported in this standard is, pain.001-sepa-credit-transfers, pain.001-instant-sepa-credit-transfers, pain.001-target-2-payments or pain.001-cross-border-credit-transfers. Further products might be published by the ASPSP within its XS2A documentation.

	*/
	PaymentProduct string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithTimeout(timeout time.Duration) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithContext(ctx context.Context) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithHTTPClient(client *http.Client) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithAuthorization(authorization *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithConsentID adds the consentID to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithConsentID(consentID string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WithContentType adds the contentType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithContentType(contentType string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetContentType(contentType string) {
	o.ContentType = contentType
}

// WithDigest adds the digest to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithDigest(digest *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithPSUCorporateID adds the pSUCorporateID to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPSUCorporateID(pSUCorporateID *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPSUCorporateID(pSUCorporateID)
	return o
}

// SetPSUCorporateID adds the pSUCorporateId to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPSUCorporateID(pSUCorporateID *string) {
	o.PSUCorporateID = pSUCorporateID
}

// WithPSUCorporateIDType adds the pSUCorporateIDType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPSUCorporateIDType(pSUCorporateIDType *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPSUCorporateIDType(pSUCorporateIDType)
	return o
}

// SetPSUCorporateIDType adds the pSUCorporateIdType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPSUCorporateIDType(pSUCorporateIDType *string) {
	o.PSUCorporateIDType = pSUCorporateIDType
}

// WithPSUID adds the pSUID to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPSUID(pSUID *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPSUID(pSUID)
	return o
}

// SetPSUID adds the pSUId to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPSUID(pSUID *string) {
	o.PSUID = pSUID
}

// WithPSUIDType adds the pSUIDType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPSUIDType(pSUIDType *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPSUIDType(pSUIDType)
	return o
}

// SetPSUIDType adds the pSUIdType to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPSUIDType(pSUIDType *string) {
	o.PSUIDType = pSUIDType
}

// WithPSUipAddress adds the pSUIPAddress to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPSUipAddress(pSUIPAddress string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPSUipAddress(pSUIPAddress)
	return o
}

// SetPSUipAddress adds the pSUIpAddress to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPSUipAddress(pSUIPAddress string) {
	o.PSUipAddress = pSUIPAddress
}

// WithSignature adds the signature to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithSignature(signature *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithTPPNokRedirectURI adds the tPPNokRedirectURI to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithTPPNokRedirectURI(tPPNokRedirectURI *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetTPPNokRedirectURI(tPPNokRedirectURI)
	return o
}

// SetTPPNokRedirectURI adds the tPPNokRedirectUri to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetTPPNokRedirectURI(tPPNokRedirectURI *string) {
	o.TPPNokRedirectURI = tPPNokRedirectURI
}

// WithTPPRedirectPreferred adds the tPPRedirectPreferred to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithTPPRedirectPreferred(tPPRedirectPreferred *bool) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetTPPRedirectPreferred(tPPRedirectPreferred)
	return o
}

// SetTPPRedirectPreferred adds the tPPRedirectPreferred to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetTPPRedirectPreferred(tPPRedirectPreferred *bool) {
	o.TPPRedirectPreferred = tPPRedirectPreferred
}

// WithTPPRedirectURI adds the tPPRedirectURI to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithTPPRedirectURI(tPPRedirectURI *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetTPPRedirectURI(tPPRedirectURI)
	return o
}

// SetTPPRedirectURI adds the tPPRedirectUri to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetTPPRedirectURI(tPPRedirectURI *string) {
	o.TPPRedirectURI = tPPRedirectURI
}

// WithTPPSignatureCertificate adds the tPPSignatureCertificate to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithTPPSignatureCertificate(tPPSignatureCertificate *string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetTPPSignatureCertificate(tPPSignatureCertificate)
	return o
}

// SetTPPSignatureCertificate adds the tPPSignatureCertificate to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetTPPSignatureCertificate(tPPSignatureCertificate *string) {
	o.TPPSignatureCertificate = tPPSignatureCertificate
}

// WithXRequestID adds the xRequestID to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithXRequestID(xRequestID strfmt.UUID) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithBody adds the body to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithBody(body *models.PeriodicPaymentsRequest) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetBody(body *models.PeriodicPaymentsRequest) {
	o.Body = body
}

// WithPaymentProduct adds the paymentProduct to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) WithPaymentProduct(paymentProduct string) *PeriodicPaymentsByPaymentProductPostParams {
	o.SetPaymentProduct(paymentProduct)
	return o
}

// SetPaymentProduct adds the paymentProduct to the periodic payments by payment product post params
func (o *PeriodicPaymentsByPaymentProductPostParams) SetPaymentProduct(paymentProduct string) {
	o.PaymentProduct = paymentProduct
}

// WriteToRequest writes these params to a swagger request
func (o *PeriodicPaymentsByPaymentProductPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// header param Consent-ID
	if err := r.SetHeaderParam("Consent-ID", o.ConsentID); err != nil {
		return err
	}

	// header param Content-Type
	if err := r.SetHeaderParam("Content-Type", o.ContentType); err != nil {
		return err
	}

	if o.Digest != nil {

		// header param Digest
		if err := r.SetHeaderParam("Digest", *o.Digest); err != nil {
			return err
		}

	}

	if o.PSUCorporateID != nil {

		// header param PSU-Corporate-ID
		if err := r.SetHeaderParam("PSU-Corporate-ID", *o.PSUCorporateID); err != nil {
			return err
		}

	}

	if o.PSUCorporateIDType != nil {

		// header param PSU-Corporate-ID-Type
		if err := r.SetHeaderParam("PSU-Corporate-ID-Type", *o.PSUCorporateIDType); err != nil {
			return err
		}

	}

	if o.PSUID != nil {

		// header param PSU-ID
		if err := r.SetHeaderParam("PSU-ID", *o.PSUID); err != nil {
			return err
		}

	}

	if o.PSUIDType != nil {

		// header param PSU-ID-Type
		if err := r.SetHeaderParam("PSU-ID-Type", *o.PSUIDType); err != nil {
			return err
		}

	}

	// header param PSU-IP-Address
	if err := r.SetHeaderParam("PSU-IP-Address", o.PSUIPAddress); err != nil {
		return err
	}

	if o.Signature != nil {

		// header param Signature
		if err := r.SetHeaderParam("Signature", *o.Signature); err != nil {
			return err
		}

	}

	if o.TPPNokRedirectURI != nil {

		// header param TPP-Nok-Redirect-URI
		if err := r.SetHeaderParam("TPP-Nok-Redirect-URI", *o.TPPNokRedirectURI); err != nil {
			return err
		}

	}

	if o.TPPRedirectPreferred != nil {

		// header param TPP-Redirect-Preferred
		if err := r.SetHeaderParam("TPP-Redirect-Preferred", swag.FormatBool(*o.TPPRedirectPreferred)); err != nil {
			return err
		}

	}

	if o.TPPRedirectURI != nil {

		// header param TPP-Redirect-URI
		if err := r.SetHeaderParam("TPP-Redirect-URI", *o.TPPRedirectURI); err != nil {
			return err
		}

	}

	if o.TPPSignatureCertificate != nil {

		// header param TPP-Signature-Certificate
		if err := r.SetHeaderParam("TPP-Signature-Certificate", *o.TPPSignatureCertificate); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param payment-product
	if err := r.SetPathParam("payment-product", o.PaymentProduct); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
