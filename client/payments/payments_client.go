// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new payments API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for payments API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
BulkPaymentsByPaymentProductPost creates a bulk payment

Creates a payment initiation resource addressable under {paymentId} with all data relevant for the corresponding payment product. This is the first step in the API to initiate the related payment
*/
func (a *Client) BulkPaymentsByPaymentProductPost(params *BulkPaymentsByPaymentProductPostParams) (*BulkPaymentsByPaymentProductPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBulkPaymentsByPaymentProductPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BulkPaymentsByPaymentProductPost",
		Method:             "POST",
		PathPattern:        "/bulk-payments/{payment-product}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &BulkPaymentsByPaymentProductPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*BulkPaymentsByPaymentProductPostOK), nil

}

/*
PaymentIDByPaymentServiceAndPaymentProductGet gets payment details

Reads the details of an initiated payment.
*/
func (a *Client) PaymentIDByPaymentServiceAndPaymentProductGet(params *PaymentIDByPaymentServiceAndPaymentProductGetParams) (*PaymentIDByPaymentServiceAndPaymentProductGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentIDByPaymentServiceAndPaymentProductGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PaymentIdByPaymentServiceAndPaymentProductGet",
		Method:             "GET",
		PathPattern:        "/{payment-service}/{payment-product}/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentIDByPaymentServiceAndPaymentProductGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PaymentIDByPaymentServiceAndPaymentProductGetOK), nil

}

/*
PaymentIDByPaymentServiceAndPaymentProductPut updates payment

Updates data on the payment resource if needed. It may authorise a payment within the Embedded SCA Approach where needed.
*/
func (a *Client) PaymentIDByPaymentServiceAndPaymentProductPut(params *PaymentIDByPaymentServiceAndPaymentProductPutParams) (*PaymentIDByPaymentServiceAndPaymentProductPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentIDByPaymentServiceAndPaymentProductPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PaymentIdByPaymentServiceAndPaymentProductPut",
		Method:             "PUT",
		PathPattern:        "/{payment-service}/{payment-product}/{paymentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentIDByPaymentServiceAndPaymentProductPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PaymentIDByPaymentServiceAndPaymentProductPutCreated), nil

}

/*
PaymentIDStatusByPaymentServiceAndPaymentProductGet gets the status of a payment

Reads the transaction status of the payment
*/
func (a *Client) PaymentIDStatusByPaymentServiceAndPaymentProductGet(params *PaymentIDStatusByPaymentServiceAndPaymentProductGetParams) (*PaymentIDStatusByPaymentServiceAndPaymentProductGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentIDStatusByPaymentServiceAndPaymentProductGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PaymentIdStatusByPaymentServiceAndPaymentProductGet",
		Method:             "GET",
		PathPattern:        "/{payment-service}/{payment-product}/{paymentId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentIDStatusByPaymentServiceAndPaymentProductGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PaymentIDStatusByPaymentServiceAndPaymentProductGetOK), nil

}

/*
PaymentsByPaymentProductPost creates a single payment

Creates a payment initiation resource addressable under {paymentId} with all data relevant for the corresponding payment product. This is the first step in the API to initiate the related payment
*/
func (a *Client) PaymentsByPaymentProductPost(params *PaymentsByPaymentProductPostParams) (*PaymentsByPaymentProductPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPaymentsByPaymentProductPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PaymentsByPaymentProductPost",
		Method:             "POST",
		PathPattern:        "/payments/{payment-product}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PaymentsByPaymentProductPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PaymentsByPaymentProductPostOK), nil

}

/*
PeriodicPaymentsByPaymentProductPost creates a periodic payment

Creates a payment initiation resource addressable under {paymentID} with all data relevant for the corresponding payment product. This is the first step in the API to initiate the related payment
*/
func (a *Client) PeriodicPaymentsByPaymentProductPost(params *PeriodicPaymentsByPaymentProductPostParams) (*PeriodicPaymentsByPaymentProductPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeriodicPaymentsByPaymentProductPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PeriodicPaymentsByPaymentProductPost",
		Method:             "POST",
		PathPattern:        "/periodic-payments/{payment-product}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PeriodicPaymentsByPaymentProductPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PeriodicPaymentsByPaymentProductPostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
