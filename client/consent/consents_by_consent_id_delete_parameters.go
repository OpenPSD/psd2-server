// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewConsentsByConsentIDDeleteParams creates a new ConsentsByConsentIDDeleteParams object
// with the default values initialized.
func NewConsentsByConsentIDDeleteParams() *ConsentsByConsentIDDeleteParams {
	var ()
	return &ConsentsByConsentIDDeleteParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConsentsByConsentIDDeleteParamsWithTimeout creates a new ConsentsByConsentIDDeleteParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConsentsByConsentIDDeleteParamsWithTimeout(timeout time.Duration) *ConsentsByConsentIDDeleteParams {
	var ()
	return &ConsentsByConsentIDDeleteParams{

		timeout: timeout,
	}
}

// NewConsentsByConsentIDDeleteParamsWithContext creates a new ConsentsByConsentIDDeleteParams object
// with the default values initialized, and the ability to set a context for a request
func NewConsentsByConsentIDDeleteParamsWithContext(ctx context.Context) *ConsentsByConsentIDDeleteParams {
	var ()
	return &ConsentsByConsentIDDeleteParams{

		Context: ctx,
	}
}

// NewConsentsByConsentIDDeleteParamsWithHTTPClient creates a new ConsentsByConsentIDDeleteParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConsentsByConsentIDDeleteParamsWithHTTPClient(client *http.Client) *ConsentsByConsentIDDeleteParams {
	var ()
	return &ConsentsByConsentIDDeleteParams{
		HTTPClient: client,
	}
}

/*ConsentsByConsentIDDeleteParams contains all the parameters to send to the API endpoint
for the consents by consent Id delete operation typically these are written to a http.Request
*/
type ConsentsByConsentIDDeleteParams struct {

	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*ConsentID
	  ID of the corresponding consent object as returned by an Account Information Consent Request

	*/
	ConsentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithTimeout(timeout time.Duration) *ConsentsByConsentIDDeleteParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithContext(ctx context.Context) *ConsentsByConsentIDDeleteParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithHTTPClient(client *http.Client) *ConsentsByConsentIDDeleteParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithAuthorization(authorization *string) *ConsentsByConsentIDDeleteParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithXRequestID adds the xRequestID to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithXRequestID(xRequestID strfmt.UUID) *ConsentsByConsentIDDeleteParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithConsentID adds the consentID to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) WithConsentID(consentID string) *ConsentsByConsentIDDeleteParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the consents by consent Id delete params
func (o *ConsentsByConsentIDDeleteParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WriteToRequest writes these params to a swagger request
func (o *ConsentsByConsentIDDeleteParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	// path param consentId
	if err := r.SetPathParam("consentId", o.ConsentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
