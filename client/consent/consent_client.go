// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new consent API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consent API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ConsentsByConsentIDDelete deletes consent

Deletes a created consent with ID.
*/
func (a *Client) ConsentsByConsentIDDelete(params *ConsentsByConsentIDDeleteParams) (*ConsentsByConsentIDDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsentsByConsentIDDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsentsByConsentIdDelete",
		Method:             "DELETE",
		PathPattern:        "/consents/{consentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsentsByConsentIDDeleteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConsentsByConsentIDDeleteNoContent), nil

}

/*
ConsentsByConsentIDGet gets consent details

Reads the exact definition of the given consent resource {consentId}
*/
func (a *Client) ConsentsByConsentIDGet(params *ConsentsByConsentIDGetParams) (*ConsentsByConsentIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsentsByConsentIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsentsByConsentIdGet",
		Method:             "GET",
		PathPattern:        "/consents/{consentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsentsByConsentIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConsentsByConsentIDGetOK), nil

}

/*
ConsentsByConsentIDPut updates consent

Updates data on the consent resource, authorises a consent within the Embedded SCA Approach where needed.
*/
func (a *Client) ConsentsByConsentIDPut(params *ConsentsByConsentIDPutParams) (*ConsentsByConsentIDPutCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsentsByConsentIDPutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsentsByConsentIdPut",
		Method:             "PUT",
		PathPattern:        "/consents/{consentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsentsByConsentIDPutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConsentsByConsentIDPutCreated), nil

}

/*
ConsentsPost creates a consent

Creates a consent resource, defining access rights to dedicated accounts of a given PSU-ID. These accounts must be addressed explicitly in the method as parameters.
*/
func (a *Client) ConsentsPost(params *ConsentsPostParams) (*ConsentsPostCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsentsPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsentsPost",
		Method:             "POST",
		PathPattern:        "/consents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsentsPostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConsentsPostCreated), nil

}

/*
ConsentsStatusByConsentIDGet gets status of a consent

Reads the transaction status of the addressed consent resource.
*/
func (a *Client) ConsentsStatusByConsentIDGet(params *ConsentsStatusByConsentIDGetParams) (*ConsentsStatusByConsentIDGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConsentsStatusByConsentIDGetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConsentsStatusByConsentIdGet",
		Method:             "GET",
		PathPattern:        "/consents/{consentId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConsentsStatusByConsentIDGetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ConsentsStatusByConsentIDGetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
