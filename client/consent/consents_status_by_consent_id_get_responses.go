// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/openpsd/psd2-server/models"
)

// ConsentsStatusByConsentIDGetReader is a Reader for the ConsentsStatusByConsentIDGet structure.
type ConsentsStatusByConsentIDGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConsentsStatusByConsentIDGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewConsentsStatusByConsentIDGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewConsentsStatusByConsentIDGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewConsentsStatusByConsentIDGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewConsentsStatusByConsentIDGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewConsentsStatusByConsentIDGetDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConsentsStatusByConsentIDGetOK creates a ConsentsStatusByConsentIDGetOK with default headers values
func NewConsentsStatusByConsentIDGetOK() *ConsentsStatusByConsentIDGetOK {
	return &ConsentsStatusByConsentIDGetOK{}
}

/*ConsentsStatusByConsentIDGetOK handles this case with default header values.

Transaction status
*/
type ConsentsStatusByConsentIDGetOK struct {
	Payload *models.ConsentsStatusResponse
}

func (o *ConsentsStatusByConsentIDGetOK) Error() string {
	return fmt.Sprintf("[GET /consents/{consentId}/status][%d] consentsStatusByConsentIdGetOK  %+v", 200, o.Payload)
}

func (o *ConsentsStatusByConsentIDGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentsStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsStatusByConsentIDGetBadRequest creates a ConsentsStatusByConsentIDGetBadRequest with default headers values
func NewConsentsStatusByConsentIDGetBadRequest() *ConsentsStatusByConsentIDGetBadRequest {
	return &ConsentsStatusByConsentIDGetBadRequest{}
}

/*ConsentsStatusByConsentIDGetBadRequest handles this case with default header values.

Bad Request
*/
type ConsentsStatusByConsentIDGetBadRequest struct {
	Payload *models.TppMessage
}

func (o *ConsentsStatusByConsentIDGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /consents/{consentId}/status][%d] consentsStatusByConsentIdGetBadRequest  %+v", 400, o.Payload)
}

func (o *ConsentsStatusByConsentIDGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsStatusByConsentIDGetUnauthorized creates a ConsentsStatusByConsentIDGetUnauthorized with default headers values
func NewConsentsStatusByConsentIDGetUnauthorized() *ConsentsStatusByConsentIDGetUnauthorized {
	return &ConsentsStatusByConsentIDGetUnauthorized{}
}

/*ConsentsStatusByConsentIDGetUnauthorized handles this case with default header values.

Unauthorized
*/
type ConsentsStatusByConsentIDGetUnauthorized struct {
	Payload *models.TppMessage
}

func (o *ConsentsStatusByConsentIDGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /consents/{consentId}/status][%d] consentsStatusByConsentIdGetUnauthorized  %+v", 401, o.Payload)
}

func (o *ConsentsStatusByConsentIDGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsStatusByConsentIDGetForbidden creates a ConsentsStatusByConsentIDGetForbidden with default headers values
func NewConsentsStatusByConsentIDGetForbidden() *ConsentsStatusByConsentIDGetForbidden {
	return &ConsentsStatusByConsentIDGetForbidden{}
}

/*ConsentsStatusByConsentIDGetForbidden handles this case with default header values.

Forbidden
*/
type ConsentsStatusByConsentIDGetForbidden struct {
	Payload *models.TppMessage
}

func (o *ConsentsStatusByConsentIDGetForbidden) Error() string {
	return fmt.Sprintf("[GET /consents/{consentId}/status][%d] consentsStatusByConsentIdGetForbidden  %+v", 403, o.Payload)
}

func (o *ConsentsStatusByConsentIDGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsStatusByConsentIDGetDefault creates a ConsentsStatusByConsentIDGetDefault with default headers values
func NewConsentsStatusByConsentIDGetDefault(code int) *ConsentsStatusByConsentIDGetDefault {
	return &ConsentsStatusByConsentIDGetDefault{
		_statusCode: code,
	}
}

/*ConsentsStatusByConsentIDGetDefault handles this case with default header values.

Internal Server Error
*/
type ConsentsStatusByConsentIDGetDefault struct {
	_statusCode int

	Payload *models.TppMessage
}

// Code gets the status code for the consents status by consent Id get default response
func (o *ConsentsStatusByConsentIDGetDefault) Code() int {
	return o._statusCode
}

func (o *ConsentsStatusByConsentIDGetDefault) Error() string {
	return fmt.Sprintf("[GET /consents/{consentId}/status][%d] ConsentsStatusByConsentIdGet default  %+v", o._statusCode, o.Payload)
}

func (o *ConsentsStatusByConsentIDGetDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
