// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package consent

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/openpsd/psd2-server/models"
)

// ConsentsByConsentIDPutReader is a Reader for the ConsentsByConsentIDPut structure.
type ConsentsByConsentIDPutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConsentsByConsentIDPutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewConsentsByConsentIDPutCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewConsentsByConsentIDPutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewConsentsByConsentIDPutUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 403:
		result := NewConsentsByConsentIDPutForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewConsentsByConsentIDPutDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConsentsByConsentIDPutCreated creates a ConsentsByConsentIDPutCreated with default headers values
func NewConsentsByConsentIDPutCreated() *ConsentsByConsentIDPutCreated {
	return &ConsentsByConsentIDPutCreated{}
}

/*ConsentsByConsentIDPutCreated handles this case with default header values.

OK
*/
type ConsentsByConsentIDPutCreated struct {
	Payload *models.ConsentsResponse146
}

func (o *ConsentsByConsentIDPutCreated) Error() string {
	return fmt.Sprintf("[PUT /consents/{consentId}][%d] consentsByConsentIdPutCreated  %+v", 201, o.Payload)
}

func (o *ConsentsByConsentIDPutCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConsentsResponse146)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsByConsentIDPutBadRequest creates a ConsentsByConsentIDPutBadRequest with default headers values
func NewConsentsByConsentIDPutBadRequest() *ConsentsByConsentIDPutBadRequest {
	return &ConsentsByConsentIDPutBadRequest{}
}

/*ConsentsByConsentIDPutBadRequest handles this case with default header values.

Bad Request
*/
type ConsentsByConsentIDPutBadRequest struct {
	Payload *models.TppMessage
}

func (o *ConsentsByConsentIDPutBadRequest) Error() string {
	return fmt.Sprintf("[PUT /consents/{consentId}][%d] consentsByConsentIdPutBadRequest  %+v", 400, o.Payload)
}

func (o *ConsentsByConsentIDPutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsByConsentIDPutUnauthorized creates a ConsentsByConsentIDPutUnauthorized with default headers values
func NewConsentsByConsentIDPutUnauthorized() *ConsentsByConsentIDPutUnauthorized {
	return &ConsentsByConsentIDPutUnauthorized{}
}

/*ConsentsByConsentIDPutUnauthorized handles this case with default header values.

Unauthorized
*/
type ConsentsByConsentIDPutUnauthorized struct {
	Payload *models.TppMessage
}

func (o *ConsentsByConsentIDPutUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /consents/{consentId}][%d] consentsByConsentIdPutUnauthorized  %+v", 401, o.Payload)
}

func (o *ConsentsByConsentIDPutUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsByConsentIDPutForbidden creates a ConsentsByConsentIDPutForbidden with default headers values
func NewConsentsByConsentIDPutForbidden() *ConsentsByConsentIDPutForbidden {
	return &ConsentsByConsentIDPutForbidden{}
}

/*ConsentsByConsentIDPutForbidden handles this case with default header values.

Forbidden
*/
type ConsentsByConsentIDPutForbidden struct {
	Payload *models.TppMessage
}

func (o *ConsentsByConsentIDPutForbidden) Error() string {
	return fmt.Sprintf("[PUT /consents/{consentId}][%d] consentsByConsentIdPutForbidden  %+v", 403, o.Payload)
}

func (o *ConsentsByConsentIDPutForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConsentsByConsentIDPutDefault creates a ConsentsByConsentIDPutDefault with default headers values
func NewConsentsByConsentIDPutDefault(code int) *ConsentsByConsentIDPutDefault {
	return &ConsentsByConsentIDPutDefault{
		_statusCode: code,
	}
}

/*ConsentsByConsentIDPutDefault handles this case with default header values.

Internal Server Error
*/
type ConsentsByConsentIDPutDefault struct {
	_statusCode int

	Payload *models.TppMessage
}

// Code gets the status code for the consents by consent Id put default response
func (o *ConsentsByConsentIDPutDefault) Code() int {
	return o._statusCode
}

func (o *ConsentsByConsentIDPutDefault) Error() string {
	return fmt.Sprintf("[PUT /consents/{consentId}][%d] ConsentsByConsentIdPut default  %+v", o._statusCode, o.Payload)
}

func (o *ConsentsByConsentIDPutDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TppMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
