// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAccountsTransactionsByAccountIDAndResourceIDGetParams creates a new AccountsTransactionsByAccountIDAndResourceIDGetParams object
// with the default values initialized.
func NewAccountsTransactionsByAccountIDAndResourceIDGetParams() *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDAndResourceIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithTimeout creates a new AccountsTransactionsByAccountIDAndResourceIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithTimeout(timeout time.Duration) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDAndResourceIDGetParams{

		timeout: timeout,
	}
}

// NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithContext creates a new AccountsTransactionsByAccountIDAndResourceIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithContext(ctx context.Context) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDAndResourceIDGetParams{

		Context: ctx,
	}
}

// NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithHTTPClient creates a new AccountsTransactionsByAccountIDAndResourceIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAccountsTransactionsByAccountIDAndResourceIDGetParamsWithHTTPClient(client *http.Client) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDAndResourceIDGetParams{
		HTTPClient: client,
	}
}

/*AccountsTransactionsByAccountIDAndResourceIDGetParams contains all the parameters to send to the API endpoint
for the accounts transactions by account Id and resource Id get operation typically these are written to a http.Request
*/
type AccountsTransactionsByAccountIDAndResourceIDGetParams struct {

	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*ConsentID
	  Shall be contained since "Establish Consent Transaction" was performed via this API before.

	*/
	ConsentID string
	/*Digest
	  Is contained if and only if the "Signature" element is contained in the header of the request.

	*/
	Digest *string
	/*Signature
	  A signature of the request by the TPP on application level. This might be mandated by ASPSP.

	*/
	Signature *string
	/*TPPSignatureCertificate
	  The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.

	*/
	TPPSignatureCertificate *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*AccountID
	  This identification is denoting the addressed account. The account-id is retrieved by using a "Read Account List" call. The account-id is the "resourceId" attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent.

	*/
	AccountID string
	/*ResourceID
	  This identification is given by the attribute resourceId of the corresponding entry of a transaction list.

	*/
	ResourceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithTimeout(timeout time.Duration) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithContext(ctx context.Context) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithHTTPClient(client *http.Client) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithAuthorization(authorization *string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithConsentID adds the consentID to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithConsentID(consentID string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WithDigest adds the digest to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithDigest(digest *string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithSignature adds the signature to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithSignature(signature *string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithTPPSignatureCertificate(tPPSignatureCertificate *string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetTPPSignatureCertificate(tPPSignatureCertificate)
	return o
}

// SetTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetTPPSignatureCertificate(tPPSignatureCertificate *string) {
	o.TPPSignatureCertificate = tPPSignatureCertificate
}

// WithXRequestID adds the xRequestID to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithXRequestID(xRequestID strfmt.UUID) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithAccountID adds the accountID to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithAccountID(accountID string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithResourceID adds the resourceID to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WithResourceID(resourceID string) *AccountsTransactionsByAccountIDAndResourceIDGetParams {
	o.SetResourceID(resourceID)
	return o
}

// SetResourceID adds the resourceId to the accounts transactions by account Id and resource Id get params
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) SetResourceID(resourceID string) {
	o.ResourceID = resourceID
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsTransactionsByAccountIDAndResourceIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// header param Consent-ID
	if err := r.SetHeaderParam("Consent-ID", o.ConsentID); err != nil {
		return err
	}

	if o.Digest != nil {

		// header param Digest
		if err := r.SetHeaderParam("Digest", *o.Digest); err != nil {
			return err
		}

	}

	if o.Signature != nil {

		// header param Signature
		if err := r.SetHeaderParam("Signature", *o.Signature); err != nil {
			return err
		}

	}

	if o.TPPSignatureCertificate != nil {

		// header param TPP-Signature-Certificate
		if err := r.SetHeaderParam("TPP-Signature-Certificate", *o.TPPSignatureCertificate); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	// path param account-id
	if err := r.SetPathParam("account-id", o.AccountID); err != nil {
		return err
	}

	// path param resourceId
	if err := r.SetPathParam("resourceId", o.ResourceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
