// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAccountsTransactionsByAccountIDGetParams creates a new AccountsTransactionsByAccountIDGetParams object
// with the default values initialized.
func NewAccountsTransactionsByAccountIDGetParams() *AccountsTransactionsByAccountIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsTransactionsByAccountIDGetParamsWithTimeout creates a new AccountsTransactionsByAccountIDGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAccountsTransactionsByAccountIDGetParamsWithTimeout(timeout time.Duration) *AccountsTransactionsByAccountIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDGetParams{

		timeout: timeout,
	}
}

// NewAccountsTransactionsByAccountIDGetParamsWithContext creates a new AccountsTransactionsByAccountIDGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewAccountsTransactionsByAccountIDGetParamsWithContext(ctx context.Context) *AccountsTransactionsByAccountIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDGetParams{

		Context: ctx,
	}
}

// NewAccountsTransactionsByAccountIDGetParamsWithHTTPClient creates a new AccountsTransactionsByAccountIDGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAccountsTransactionsByAccountIDGetParamsWithHTTPClient(client *http.Client) *AccountsTransactionsByAccountIDGetParams {
	var ()
	return &AccountsTransactionsByAccountIDGetParams{
		HTTPClient: client,
	}
}

/*AccountsTransactionsByAccountIDGetParams contains all the parameters to send to the API endpoint
for the accounts transactions by account Id get operation typically these are written to a http.Request
*/
type AccountsTransactionsByAccountIDGetParams struct {

	/*Accept
	  The TPP can indicate the formats of account reports supported together with a priorisation following the HTTP header definition.

	*/
	Accept *string
	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*ConsentID
	  Shall be contained since "Establish Consent Transaction" was performed via this API before.

	*/
	ConsentID string
	/*Digest
	  Is contained if and only if the "Signature" element is contained in the header of the request.

	*/
	Digest *string
	/*Signature
	  A signature of the request by the TPP on application level. This might be mandated by ASPSP.

	*/
	Signature *string
	/*TPPSignatureCertificate
	  The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.

	*/
	TPPSignatureCertificate *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*AccountID
	  This identification is denoting the addressed account. The account-id is retrieved by using a "Read Account List" call. The account-id is the "resourceId" attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent.

	*/
	AccountID string
	/*BookingStatus
	  Permitted codes are "booked", "pending" and "both "booked" shall be supported by the ASPSP. To support the "pending" and "both" feature is optional for the ASPSP, Error code if not supported in the online banking frontend

	*/
	BookingStatus string
	/*DateFrom
	  Starting date (inclusive the date dateFrom) of the transaction list, mandated if no delta access is required

	*/
	DateFrom *strfmt.Date
	/*DateTo
	  End date (inclusive the data dateTo) of the transaction list, default is now if not given.

	*/
	DateTo *strfmt.Date
	/*DeltaList
	  This data attribute is indicating that the AISP is in favour to get all transactions after the last report access for this PSU on the addressed account. This is another implementation of a delta access-report. This delta indicator might be rejected by the ASPSP if this function is not supported.

	*/
	DeltaList *bool
	/*EntryReferenceFrom
	  This data attribute is indicating that the AISP is in favour to get all transactions after the transaction with identification entryReferenceFrom alternatively to the above defined period. This is a implementation of a delta access. If this data element is contained, the entries "dateFrom" and "dateTo" might be ignored by the ASPSP if a delta report is supported.

	*/
	EntryReferenceFrom *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithTimeout(timeout time.Duration) *AccountsTransactionsByAccountIDGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithContext(ctx context.Context) *AccountsTransactionsByAccountIDGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithHTTPClient(client *http.Client) *AccountsTransactionsByAccountIDGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccept adds the accept to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithAccept(accept *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetAccept(accept)
	return o
}

// SetAccept adds the accept to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetAccept(accept *string) {
	o.Accept = accept
}

// WithAuthorization adds the authorization to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithAuthorization(authorization *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithConsentID adds the consentID to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithConsentID(consentID string) *AccountsTransactionsByAccountIDGetParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WithDigest adds the digest to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithDigest(digest *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithSignature adds the signature to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithSignature(signature *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithTPPSignatureCertificate(tPPSignatureCertificate *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetTPPSignatureCertificate(tPPSignatureCertificate)
	return o
}

// SetTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetTPPSignatureCertificate(tPPSignatureCertificate *string) {
	o.TPPSignatureCertificate = tPPSignatureCertificate
}

// WithXRequestID adds the xRequestID to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithXRequestID(xRequestID strfmt.UUID) *AccountsTransactionsByAccountIDGetParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithAccountID adds the accountID to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithAccountID(accountID string) *AccountsTransactionsByAccountIDGetParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetAccountID(accountID string) {
	o.AccountID = accountID
}

// WithBookingStatus adds the bookingStatus to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithBookingStatus(bookingStatus string) *AccountsTransactionsByAccountIDGetParams {
	o.SetBookingStatus(bookingStatus)
	return o
}

// SetBookingStatus adds the bookingStatus to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetBookingStatus(bookingStatus string) {
	o.BookingStatus = bookingStatus
}

// WithDateFrom adds the dateFrom to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithDateFrom(dateFrom *strfmt.Date) *AccountsTransactionsByAccountIDGetParams {
	o.SetDateFrom(dateFrom)
	return o
}

// SetDateFrom adds the dateFrom to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetDateFrom(dateFrom *strfmt.Date) {
	o.DateFrom = dateFrom
}

// WithDateTo adds the dateTo to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithDateTo(dateTo *strfmt.Date) *AccountsTransactionsByAccountIDGetParams {
	o.SetDateTo(dateTo)
	return o
}

// SetDateTo adds the dateTo to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetDateTo(dateTo *strfmt.Date) {
	o.DateTo = dateTo
}

// WithDeltaList adds the deltaList to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithDeltaList(deltaList *bool) *AccountsTransactionsByAccountIDGetParams {
	o.SetDeltaList(deltaList)
	return o
}

// SetDeltaList adds the deltaList to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetDeltaList(deltaList *bool) {
	o.DeltaList = deltaList
}

// WithEntryReferenceFrom adds the entryReferenceFrom to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) WithEntryReferenceFrom(entryReferenceFrom *string) *AccountsTransactionsByAccountIDGetParams {
	o.SetEntryReferenceFrom(entryReferenceFrom)
	return o
}

// SetEntryReferenceFrom adds the entryReferenceFrom to the accounts transactions by account Id get params
func (o *AccountsTransactionsByAccountIDGetParams) SetEntryReferenceFrom(entryReferenceFrom *string) {
	o.EntryReferenceFrom = entryReferenceFrom
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsTransactionsByAccountIDGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Accept != nil {

		// header param Accept
		if err := r.SetHeaderParam("Accept", *o.Accept); err != nil {
			return err
		}

	}

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// header param Consent-ID
	if err := r.SetHeaderParam("Consent-ID", o.ConsentID); err != nil {
		return err
	}

	if o.Digest != nil {

		// header param Digest
		if err := r.SetHeaderParam("Digest", *o.Digest); err != nil {
			return err
		}

	}

	if o.Signature != nil {

		// header param Signature
		if err := r.SetHeaderParam("Signature", *o.Signature); err != nil {
			return err
		}

	}

	if o.TPPSignatureCertificate != nil {

		// header param TPP-Signature-Certificate
		if err := r.SetHeaderParam("TPP-Signature-Certificate", *o.TPPSignatureCertificate); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	// path param account-id
	if err := r.SetPathParam("account-id", o.AccountID); err != nil {
		return err
	}

	// query param bookingStatus
	qrBookingStatus := o.BookingStatus
	qBookingStatus := qrBookingStatus
	if qBookingStatus != "" {
		if err := r.SetQueryParam("bookingStatus", qBookingStatus); err != nil {
			return err
		}
	}

	if o.DateFrom != nil {

		// query param dateFrom
		var qrDateFrom strfmt.Date
		if o.DateFrom != nil {
			qrDateFrom = *o.DateFrom
		}
		qDateFrom := qrDateFrom.String()
		if qDateFrom != "" {
			if err := r.SetQueryParam("dateFrom", qDateFrom); err != nil {
				return err
			}
		}

	}

	if o.DateTo != nil {

		// query param dateTo
		var qrDateTo strfmt.Date
		if o.DateTo != nil {
			qrDateTo = *o.DateTo
		}
		qDateTo := qrDateTo.String()
		if qDateTo != "" {
			if err := r.SetQueryParam("dateTo", qDateTo); err != nil {
				return err
			}
		}

	}

	if o.DeltaList != nil {

		// query param deltaList
		var qrDeltaList bool
		if o.DeltaList != nil {
			qrDeltaList = *o.DeltaList
		}
		qDeltaList := swag.FormatBool(qrDeltaList)
		if qDeltaList != "" {
			if err := r.SetQueryParam("deltaList", qDeltaList); err != nil {
				return err
			}
		}

	}

	if o.EntryReferenceFrom != nil {

		// query param entryReferenceFrom
		var qrEntryReferenceFrom string
		if o.EntryReferenceFrom != nil {
			qrEntryReferenceFrom = *o.EntryReferenceFrom
		}
		qEntryReferenceFrom := qrEntryReferenceFrom
		if qEntryReferenceFrom != "" {
			if err := r.SetQueryParam("entryReferenceFrom", qEntryReferenceFrom); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
