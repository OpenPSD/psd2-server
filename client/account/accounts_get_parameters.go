// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAccountsGetParams creates a new AccountsGetParams object
// with the default values initialized.
func NewAccountsGetParams() *AccountsGetParams {
	var ()
	return &AccountsGetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAccountsGetParamsWithTimeout creates a new AccountsGetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAccountsGetParamsWithTimeout(timeout time.Duration) *AccountsGetParams {
	var ()
	return &AccountsGetParams{

		timeout: timeout,
	}
}

// NewAccountsGetParamsWithContext creates a new AccountsGetParams object
// with the default values initialized, and the ability to set a context for a request
func NewAccountsGetParamsWithContext(ctx context.Context) *AccountsGetParams {
	var ()
	return &AccountsGetParams{

		Context: ctx,
	}
}

// NewAccountsGetParamsWithHTTPClient creates a new AccountsGetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAccountsGetParamsWithHTTPClient(client *http.Client) *AccountsGetParams {
	var ()
	return &AccountsGetParams{
		HTTPClient: client,
	}
}

/*AccountsGetParams contains all the parameters to send to the API endpoint
for the accounts get operation typically these are written to a http.Request
*/
type AccountsGetParams struct {

	/*Authorization
	  Is contained only, if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in the related consent authorisation.

	*/
	Authorization *string
	/*ConsentID
	  Shall be contained since "Establish Consent Transaction" was performed via this API before.

	*/
	ConsentID string
	/*Digest
	  Is contained if and only if the "Signature" element is contained in the header of the request.

	*/
	Digest *string
	/*Signature
	  A signature of the request by the TPP on application level. This might be mandated by ASPSP.

	*/
	Signature *string
	/*TPPSignatureCertificate
	  The certificate used for signing the request, in base64 encoding. It shall be contained if a signature is used, see above.

	*/
	TPPSignatureCertificate *string
	/*XRequestID
	  ID of the request, unique to the call, as determined by the initiating party.

	*/
	XRequestID strfmt.UUID
	/*WithBalance
	  If contained, this function reads the list of accessible payment accounts including the booking balance, if granted by the PSU in the related consent and available by the ASPSP. This parameter might be ignored by the ASPSP.

	*/
	WithBalance *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the accounts get params
func (o *AccountsGetParams) WithTimeout(timeout time.Duration) *AccountsGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the accounts get params
func (o *AccountsGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the accounts get params
func (o *AccountsGetParams) WithContext(ctx context.Context) *AccountsGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the accounts get params
func (o *AccountsGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the accounts get params
func (o *AccountsGetParams) WithHTTPClient(client *http.Client) *AccountsGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the accounts get params
func (o *AccountsGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthorization adds the authorization to the accounts get params
func (o *AccountsGetParams) WithAuthorization(authorization *string) *AccountsGetParams {
	o.SetAuthorization(authorization)
	return o
}

// SetAuthorization adds the authorization to the accounts get params
func (o *AccountsGetParams) SetAuthorization(authorization *string) {
	o.Authorization = authorization
}

// WithConsentID adds the consentID to the accounts get params
func (o *AccountsGetParams) WithConsentID(consentID string) *AccountsGetParams {
	o.SetConsentID(consentID)
	return o
}

// SetConsentID adds the consentId to the accounts get params
func (o *AccountsGetParams) SetConsentID(consentID string) {
	o.ConsentID = consentID
}

// WithDigest adds the digest to the accounts get params
func (o *AccountsGetParams) WithDigest(digest *string) *AccountsGetParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the accounts get params
func (o *AccountsGetParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithSignature adds the signature to the accounts get params
func (o *AccountsGetParams) WithSignature(signature *string) *AccountsGetParams {
	o.SetSignature(signature)
	return o
}

// SetSignature adds the signature to the accounts get params
func (o *AccountsGetParams) SetSignature(signature *string) {
	o.Signature = signature
}

// WithTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts get params
func (o *AccountsGetParams) WithTPPSignatureCertificate(tPPSignatureCertificate *string) *AccountsGetParams {
	o.SetTPPSignatureCertificate(tPPSignatureCertificate)
	return o
}

// SetTPPSignatureCertificate adds the tPPSignatureCertificate to the accounts get params
func (o *AccountsGetParams) SetTPPSignatureCertificate(tPPSignatureCertificate *string) {
	o.TPPSignatureCertificate = tPPSignatureCertificate
}

// WithXRequestID adds the xRequestID to the accounts get params
func (o *AccountsGetParams) WithXRequestID(xRequestID strfmt.UUID) *AccountsGetParams {
	o.SetXRequestID(xRequestID)
	return o
}

// SetXRequestID adds the xRequestId to the accounts get params
func (o *AccountsGetParams) SetXRequestID(xRequestID strfmt.UUID) {
	o.XRequestID = xRequestID
}

// WithWithBalance adds the withBalance to the accounts get params
func (o *AccountsGetParams) WithWithBalance(withBalance *bool) *AccountsGetParams {
	o.SetWithBalance(withBalance)
	return o
}

// SetWithBalance adds the withBalance to the accounts get params
func (o *AccountsGetParams) SetWithBalance(withBalance *bool) {
	o.WithBalance = withBalance
}

// WriteToRequest writes these params to a swagger request
func (o *AccountsGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Authorization != nil {

		// header param Authorization
		if err := r.SetHeaderParam("Authorization", *o.Authorization); err != nil {
			return err
		}

	}

	// header param Consent-ID
	if err := r.SetHeaderParam("Consent-ID", o.ConsentID); err != nil {
		return err
	}

	if o.Digest != nil {

		// header param Digest
		if err := r.SetHeaderParam("Digest", *o.Digest); err != nil {
			return err
		}

	}

	if o.Signature != nil {

		// header param Signature
		if err := r.SetHeaderParam("Signature", *o.Signature); err != nil {
			return err
		}

	}

	if o.TPPSignatureCertificate != nil {

		// header param TPP-Signature-Certificate
		if err := r.SetHeaderParam("TPP-Signature-Certificate", *o.TPPSignatureCertificate); err != nil {
			return err
		}

	}

	// header param X-Request-ID
	if err := r.SetHeaderParam("X-Request-ID", o.XRequestID.String()); err != nil {
		return err
	}

	if o.WithBalance != nil {

		// query param withBalance
		var qrWithBalance bool
		if o.WithBalance != nil {
			qrWithBalance = *o.WithBalance
		}
		qWithBalance := swag.FormatBool(qrWithBalance)
		if qWithBalance != "" {
			if err := r.SetQueryParam("withBalance", qWithBalance); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
