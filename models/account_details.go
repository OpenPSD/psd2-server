// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccountDetails AccountDetails
// swagger:model AccountDetails
type AccountDetails struct {

	// Links to the account, which can be directly used for retrieving account information from this dedicated account. Links to “balances” and/or “transactions”
	Links map[string]interface{} `json:"_links,omitempty"`

	// balances
	Balances []*Balance `json:"balances"`

	// This data element can be used in the body of the Consent Request Message for retrieving account access consent from this account. This data elements is used for payment accounts which have no IBAN.
	Bban string `json:"bban,omitempty"`

	// The BIC associated to the account.
	Bic string `json:"bic,omitempty"`

	// ExternalCashAccountType1Code from ISO 20022
	CashAccountType string `json:"cashAccountType,omitempty"`

	// ISO 4217 Alpha 3 currency code
	// Required: true
	// Max Length: 3
	Currency *string `json:"currency"`

	// Specifications that might be provided by the ASPSP - characteristics of the account - characteristics of the relevant card
	// Max Length: 140
	Details string `json:"details,omitempty"`

	// This data element can be used in the body of the Consent Request Message for retrieving account access consent from this payment account.
	Iban string `json:"iban,omitempty"`

	// Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.
	// Max Length: 70
	LinkedAccounts string `json:"linkedAccounts,omitempty"`

	// Primary Account Number (PAN) of a card, can be tokenized by the ASPSP due to PCI DSS requirements. This data element can be used in the body of the Consent Request Message for retrieving account access consent from this card.
	// Max Length: 35
	MaskedPan string `json:"maskedPan,omitempty"`

	// An alias to access a payment account via a registered mobile phone number. This alias might be needed e.g. in the payment initiation service. The support of this alias must be explicitly documented by the ASPSP for the corresponding API Calls.
	// Max Length: 35
	Msisdn string `json:"msisdn,omitempty"`

	// Name given by the bank or the PSU in OnlineBanking.
	// Max Length: 35
	Name string `json:"name,omitempty"`

	// Primary Account Number (PAN) of a card, can be tokenized by the ASPSP due to PCI DSS requirements. This data element can be used in the body of the Consent Request Message for retrieving account access consent from this card.
	// Max Length: 35
	Pan string `json:"pan,omitempty"`

	// Product Name of the Bank for this account, proprietary definition
	// Max Length: 35
	Product string `json:"product,omitempty"`

	// This is the data element to be used in the path when retrieving data from a dedicated account.
	// Max Length: 35
	Resourceid string `json:"resourceid,omitempty"`

	// Specifies the usage of the account - PRIV: private personal account - ORGA: professional account
	// Max Length: 140
	Usage string `json:"usage,omitempty"`
}

// Validate validates this account details
func (m *AccountDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaskedPan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsisdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccountDetails) validateBalances(formats strfmt.Registry) error {

	if swag.IsZero(m.Balances) { // not required
		return nil
	}

	for i := 0; i < len(m.Balances); i++ {
		if swag.IsZero(m.Balances[i]) { // not required
			continue
		}

		if m.Balances[i] != nil {
			if err := m.Balances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("balances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccountDetails) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	if err := validate.MaxLength("currency", "body", string(*m.Currency), 3); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if err := validate.MaxLength("details", "body", string(m.Details), 140); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateLinkedAccounts(formats strfmt.Registry) error {

	if swag.IsZero(m.LinkedAccounts) { // not required
		return nil
	}

	if err := validate.MaxLength("linkedAccounts", "body", string(m.LinkedAccounts), 70); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateMaskedPan(formats strfmt.Registry) error {

	if swag.IsZero(m.MaskedPan) { // not required
		return nil
	}

	if err := validate.MaxLength("maskedPan", "body", string(m.MaskedPan), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateMsisdn(formats strfmt.Registry) error {

	if swag.IsZero(m.Msisdn) { // not required
		return nil
	}

	if err := validate.MaxLength("msisdn", "body", string(m.Msisdn), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validatePan(formats strfmt.Registry) error {

	if swag.IsZero(m.Pan) { // not required
		return nil
	}

	if err := validate.MaxLength("pan", "body", string(m.Pan), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if err := validate.MaxLength("product", "body", string(m.Product), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateResourceid(formats strfmt.Registry) error {

	if swag.IsZero(m.Resourceid) { // not required
		return nil
	}

	if err := validate.MaxLength("resourceid", "body", string(m.Resourceid), 35); err != nil {
		return err
	}

	return nil
}

func (m *AccountDetails) validateUsage(formats strfmt.Registry) error {

	if swag.IsZero(m.Usage) { // not required
		return nil
	}

	if err := validate.MaxLength("usage", "body", string(m.Usage), 140); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccountDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccountDetails) UnmarshalBinary(b []byte) error {
	var res AccountDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
