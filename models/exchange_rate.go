// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExchangeRate ExchangeRate
// swagger:model ExchangeRate
type ExchangeRate struct {

	// ISO 4217 Alpha 3 currency code
	// Required: true
	// Max Length: 3
	CurrencyFrom *string `json:"currencyFrom"`

	// ISO 4217 Alpha 3 currency code
	// Required: true
	// Max Length: 3
	CurrencyTo *string `json:"currencyTo"`

	// rate contract
	RateContract string `json:"rateContract,omitempty"`

	// rate date
	// Required: true
	// Format: date
	RateDate *strfmt.Date `json:"rateDate"`

	// rate from
	// Required: true
	RateFrom *string `json:"rateFrom"`

	// rate to
	// Required: true
	RateTo *string `json:"rateTo"`
}

// Validate validates this exchange rate
func (m *ExchangeRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrencyFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrencyTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExchangeRate) validateCurrencyFrom(formats strfmt.Registry) error {

	if err := validate.Required("currencyFrom", "body", m.CurrencyFrom); err != nil {
		return err
	}

	if err := validate.MaxLength("currencyFrom", "body", string(*m.CurrencyFrom), 3); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRate) validateCurrencyTo(formats strfmt.Registry) error {

	if err := validate.Required("currencyTo", "body", m.CurrencyTo); err != nil {
		return err
	}

	if err := validate.MaxLength("currencyTo", "body", string(*m.CurrencyTo), 3); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRate) validateRateDate(formats strfmt.Registry) error {

	if err := validate.Required("rateDate", "body", m.RateDate); err != nil {
		return err
	}

	if err := validate.FormatOf("rateDate", "body", "date", m.RateDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRate) validateRateFrom(formats strfmt.Registry) error {

	if err := validate.Required("rateFrom", "body", m.RateFrom); err != nil {
		return err
	}

	return nil
}

func (m *ExchangeRate) validateRateTo(formats strfmt.Registry) error {

	if err := validate.Required("rateTo", "body", m.RateTo); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExchangeRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExchangeRate) UnmarshalBinary(b []byte) error {
	var res ExchangeRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
