// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction Transaction
// swagger:model Transaction
type Transaction struct {

	// The following links could be used here: transactionDetails for retrieving details of a transaction.
	Links map[string]interface{} `json:"_links,omitempty"`

	// Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO20022
	BankTransactionCode string `json:"bankTransactionCode,omitempty"`

	// The Date when an entry is posted to an account on the ASPSPs books.
	// Format: date
	BookingDate strfmt.Date `json:"bookingDate,omitempty"`

	// creditor account
	CreditorAccount *AccountReference `json:"creditorAccount,omitempty"`

	// Identification of Creditors, e.g. a SEPA Creditor ID
	// Max Length: 35
	CreditorID string `json:"creditorId,omitempty"`

	// Identification of Creditors, e.g. a SEPA Creditor ID
	// Max Length: 70
	CreditorName string `json:"creditorName,omitempty"`

	// debtor account
	DebtorAccount *AccountReference `json:"debtorAccount,omitempty"`

	// Name of the debtor if a "Credited" transaction
	// Max Length: 70
	DebtorName string `json:"debtorName,omitempty"`

	// Unique end to end identity.
	// Max Length: 35
	EndToEndID string `json:"endToEndId,omitempty"`

	// Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages
	// Max Length: 35
	EntryReference string `json:"entryReference,omitempty"`

	// exchange rates
	ExchangeRates []*ExchangeRate `json:"exchangeRates"`

	// Identification of a Cheque.
	// Max Length: 35
	MandateID string `json:"mandateId,omitempty"`

	// proprietary bank transaction code as used within a community or within an ASPSP e.g. for MT94x based transaction reports
	// Max Length: 35
	ProprietaryBankTransactionCode string `json:"proprietaryBankTransactionCode,omitempty"`

	// pupose code
	PuposeCode string `json:"puposeCode,omitempty"`

	// Reference to be transported in the field.
	// Max Length: 140
	RemittanceInformationStructured string `json:"remittanceInformationStructured,omitempty"`

	// transaction amount
	// Required: true
	TransactionAmount *Amount `json:"transactionAmount"`

	// Can be used as access-id in the API, where more details on an transaction is offered.
	TransactionID string `json:"transactionId,omitempty"`

	// ultimate creditor
	// Max Length: 70
	UltimateCreditor string `json:"ultimateCreditor,omitempty"`

	// ultimate debtor
	// Max Length: 70
	UltimateDebtor string `json:"ultimateDebtor,omitempty"`

	// The Date at which assets become available to the account owner in case of a credit
	// Format: date
	ValueDate strfmt.Date `json:"valueDate,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBookingDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditorAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditorID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtorName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndToEndID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMandateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProprietaryBankTransactionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemittanceInformationStructured(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateCreditor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUltimateDebtor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateBookingDate(formats strfmt.Registry) error {

	if swag.IsZero(m.BookingDate) { // not required
		return nil
	}

	if err := validate.FormatOf("bookingDate", "body", "date", m.BookingDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateCreditorAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditorAccount) { // not required
		return nil
	}

	if m.CreditorAccount != nil {
		if err := m.CreditorAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creditorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateCreditorID(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditorID) { // not required
		return nil
	}

	if err := validate.MaxLength("creditorId", "body", string(m.CreditorID), 35); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateCreditorName(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditorName) { // not required
		return nil
	}

	if err := validate.MaxLength("creditorName", "body", string(m.CreditorName), 70); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateDebtorAccount(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorAccount) { // not required
		return nil
	}

	if m.DebtorAccount != nil {
		if err := m.DebtorAccount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("debtorAccount")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateDebtorName(formats strfmt.Registry) error {

	if swag.IsZero(m.DebtorName) { // not required
		return nil
	}

	if err := validate.MaxLength("debtorName", "body", string(m.DebtorName), 70); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateEndToEndID(formats strfmt.Registry) error {

	if swag.IsZero(m.EndToEndID) { // not required
		return nil
	}

	if err := validate.MaxLength("endToEndId", "body", string(m.EndToEndID), 35); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateEntryReference(formats strfmt.Registry) error {

	if swag.IsZero(m.EntryReference) { // not required
		return nil
	}

	if err := validate.MaxLength("entryReference", "body", string(m.EntryReference), 35); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateExchangeRates(formats strfmt.Registry) error {

	if swag.IsZero(m.ExchangeRates) { // not required
		return nil
	}

	for i := 0; i < len(m.ExchangeRates); i++ {
		if swag.IsZero(m.ExchangeRates[i]) { // not required
			continue
		}

		if m.ExchangeRates[i] != nil {
			if err := m.ExchangeRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exchangeRates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Transaction) validateMandateID(formats strfmt.Registry) error {

	if swag.IsZero(m.MandateID) { // not required
		return nil
	}

	if err := validate.MaxLength("mandateId", "body", string(m.MandateID), 35); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateProprietaryBankTransactionCode(formats strfmt.Registry) error {

	if swag.IsZero(m.ProprietaryBankTransactionCode) { // not required
		return nil
	}

	if err := validate.MaxLength("proprietaryBankTransactionCode", "body", string(m.ProprietaryBankTransactionCode), 35); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateRemittanceInformationStructured(formats strfmt.Registry) error {

	if swag.IsZero(m.RemittanceInformationStructured) { // not required
		return nil
	}

	if err := validate.MaxLength("remittanceInformationStructured", "body", string(m.RemittanceInformationStructured), 140); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTransactionAmount(formats strfmt.Registry) error {

	if err := validate.Required("transactionAmount", "body", m.TransactionAmount); err != nil {
		return err
	}

	if m.TransactionAmount != nil {
		if err := m.TransactionAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactionAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateUltimateCreditor(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateCreditor) { // not required
		return nil
	}

	if err := validate.MaxLength("ultimateCreditor", "body", string(m.UltimateCreditor), 70); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateUltimateDebtor(formats strfmt.Registry) error {

	if swag.IsZero(m.UltimateDebtor) { // not required
		return nil
	}

	if err := validate.MaxLength("ultimateDebtor", "body", string(m.UltimateDebtor), 70); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateValueDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ValueDate) { // not required
		return nil
	}

	if err := validate.FormatOf("valueDate", "body", "date", m.ValueDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
