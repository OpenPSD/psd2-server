// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PeriodicPaymentsRequest Periodic Payments Request
// swagger:model PeriodicPaymentsRequest
type PeriodicPaymentsRequest struct {

	// day of execution
	// Maximum: 31
	// Minimum: 1
	DayOfExecution int32 `json:"dayOfExecution,omitempty"`

	// end date
	// Format: date
	EndDate strfmt.Date `json:"endDate,omitempty"`

	// execution rule
	ExecutionRule string `json:"executionRule,omitempty"`

	// frequency
	Frequency Frequency `json:"frequency,omitempty"`

	// start date
	// Format: date
	StartDate strfmt.Date `json:"startDate,omitempty"`
}

// Validate validates this periodic payments request
func (m *PeriodicPaymentsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PeriodicPaymentsRequest) validateDayOfExecution(formats strfmt.Registry) error {

	if swag.IsZero(m.DayOfExecution) { // not required
		return nil
	}

	if err := validate.MinimumInt("dayOfExecution", "body", int64(m.DayOfExecution), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("dayOfExecution", "body", int64(m.DayOfExecution), 31, false); err != nil {
		return err
	}

	return nil
}

func (m *PeriodicPaymentsRequest) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("endDate", "body", "date", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PeriodicPaymentsRequest) validateFrequency(formats strfmt.Registry) error {

	if swag.IsZero(m.Frequency) { // not required
		return nil
	}

	if err := m.Frequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("frequency")
		}
		return err
	}

	return nil
}

func (m *PeriodicPaymentsRequest) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("startDate", "body", "date", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PeriodicPaymentsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PeriodicPaymentsRequest) UnmarshalBinary(b []byte) error {
	var res PeriodicPaymentsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
