// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Authentication Authentication
// swagger:model Authentication
type Authentication struct {

	// An identification provided by the ASPSP for the later identification of the authentication method selection.
	// Required: true
	// Max Length: 35
	AuthenticationMethodID *string `json:"authenticationMethodId"`

	// authentication type
	// Required: true
	AuthenticationType AuthenticationType `json:"authenticationType"`

	// Depending on the "authenticationType". This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP’s documentation.
	AuthenticationVersion string `json:"authenticationVersion,omitempty"`

	// detailed information about the sca method for the PSU.
	Explanation string `json:"explanation,omitempty"`

	// This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like “SMS OTP on phone +49160 xxxxx 28”. This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.
	Name string `json:"name,omitempty"`
}

// Validate validates this authentication
func (m *Authentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthenticationMethodID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuthenticationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authentication) validateAuthenticationMethodID(formats strfmt.Registry) error {

	if err := validate.Required("authenticationMethodId", "body", m.AuthenticationMethodID); err != nil {
		return err
	}

	if err := validate.MaxLength("authenticationMethodId", "body", string(*m.AuthenticationMethodID), 35); err != nil {
		return err
	}

	return nil
}

func (m *Authentication) validateAuthenticationType(formats strfmt.Registry) error {

	if err := m.AuthenticationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authenticationType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Authentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Authentication) UnmarshalBinary(b []byte) error {
	var res Authentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
