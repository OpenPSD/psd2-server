// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FundsConfirmationsRequest Funds Confirmations Request
// swagger:model FundsConfirmationsRequest
type FundsConfirmationsRequest struct {

	// account
	// Required: true
	Account *AccountReference `json:"account"`

	// card number
	CardNumber string `json:"cardNumber,omitempty"`

	// instructed amount
	// Required: true
	InstructedAmount *Amount `json:"instructedAmount"`

	// payee
	// Max Length: 70
	Payee string `json:"payee,omitempty"`
}

// Validate validates this funds confirmations request
func (m *FundsConfirmationsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstructedAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FundsConfirmationsRequest) validateAccount(formats strfmt.Registry) error {

	if err := validate.Required("account", "body", m.Account); err != nil {
		return err
	}

	if m.Account != nil {
		if err := m.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("account")
			}
			return err
		}
	}

	return nil
}

func (m *FundsConfirmationsRequest) validateInstructedAmount(formats strfmt.Registry) error {

	if err := validate.Required("instructedAmount", "body", m.InstructedAmount); err != nil {
		return err
	}

	if m.InstructedAmount != nil {
		if err := m.InstructedAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instructedAmount")
			}
			return err
		}
	}

	return nil
}

func (m *FundsConfirmationsRequest) validatePayee(formats strfmt.Registry) error {

	if swag.IsZero(m.Payee) { // not required
		return nil
	}

	if err := validate.MaxLength("payee", "body", string(m.Payee), 70); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FundsConfirmationsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FundsConfirmationsRequest) UnmarshalBinary(b []byte) error {
	var res FundsConfirmationsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
