// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Challenge Challenge
// swagger:model Challenge
type Challenge struct {

	// Additional explanation for the PSU to explain e.g. fallback mechanism for the chosen sca method
	AdditionalInformation string `json:"additionalInformation,omitempty"`

	// String challenge data
	Data string `json:"data,omitempty"`

	// PNG data (max. 512 kilobyte) to be displayed to the PSU, Base64 encoding. This attribute is used only, when PHOTO_OTP or CHIP_OTP is the selected SCA method.
	Image string `json:"image,omitempty"`

	// A link where the ASPSP will provides the challenge image for the TPP.
	ImageLink string `json:"imageLink,omitempty"`

	// otp format
	OtpFormat OtpFormat `json:"otpFormat,omitempty"`

	// The maximal length for the OTP to be typed in by the PSU.
	OtpMaxLength int32 `json:"otpMaxLength,omitempty"`
}

// Validate validates this challenge
func (m *Challenge) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtpFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Challenge) validateOtpFormat(formats strfmt.Registry) error {

	if swag.IsZero(m.OtpFormat) { // not required
		return nil
	}

	if err := m.OtpFormat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("otpFormat")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Challenge) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Challenge) UnmarshalBinary(b []byte) error {
	var res Challenge
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
