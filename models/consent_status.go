// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ConsentStatus ConsentStatus
// swagger:model ConsentStatus
type ConsentStatus string

const (

	// ConsentStatusReceived captures enum value "received"
	ConsentStatusReceived ConsentStatus = "received"

	// ConsentStatusRejected captures enum value "rejected"
	ConsentStatusRejected ConsentStatus = "rejected"

	// ConsentStatusValid captures enum value "valid"
	ConsentStatusValid ConsentStatus = "valid"

	// ConsentStatusRevokedByPsu captures enum value "revokedByPsu"
	ConsentStatusRevokedByPsu ConsentStatus = "revokedByPsu"

	// ConsentStatusExpired captures enum value "expired"
	ConsentStatusExpired ConsentStatus = "expired"

	// ConsentStatusTerminatedByTpp captures enum value "terminatedByTpp"
	ConsentStatusTerminatedByTpp ConsentStatus = "terminatedByTpp"
)

// for schema
var consentStatusEnum []interface{}

func init() {
	var res []ConsentStatus
	if err := json.Unmarshal([]byte(`["received","rejected","valid","revokedByPsu","expired","terminatedByTpp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		consentStatusEnum = append(consentStatusEnum, v)
	}
}

func (m ConsentStatus) validateConsentStatusEnum(path, location string, value ConsentStatus) error {
	if err := validate.Enum(path, location, value, consentStatusEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this consent status
func (m ConsentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConsentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
