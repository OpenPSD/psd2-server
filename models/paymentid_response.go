// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PaymentidResponse PaymentId Response
// swagger:model PaymentidResponse
type PaymentidResponse struct {

	// links
	Links map[string]interface{} `json:"_links,omitempty"`

	// challenge data
	ChallengeData *Challenge `json:"challengeData,omitempty"`

	// chosen sca method
	ChosenScaMethod *Authentication `json:"chosenScaMethod,omitempty"`

	// consent status
	ConsentStatus ConsentStatus `json:"consentStatus,omitempty"`

	// Text to be displayed to the PSU
	PsuMessage string `json:"psuMessage,omitempty"`

	// sca methods
	ScaMethods []*Authentication `json:"scaMethods"`

	// transaction status
	// Required: true
	TransactionStatus TransactionStatus `json:"transactionStatus"`
}

// Validate validates this paymentid response
func (m *PaymentidResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChallengeData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChosenScaMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConsentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScaMethods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentidResponse) validateChallengeData(formats strfmt.Registry) error {

	if swag.IsZero(m.ChallengeData) { // not required
		return nil
	}

	if m.ChallengeData != nil {
		if err := m.ChallengeData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("challengeData")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentidResponse) validateChosenScaMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.ChosenScaMethod) { // not required
		return nil
	}

	if m.ChosenScaMethod != nil {
		if err := m.ChosenScaMethod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chosenScaMethod")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentidResponse) validateConsentStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ConsentStatus) { // not required
		return nil
	}

	if err := m.ConsentStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("consentStatus")
		}
		return err
	}

	return nil
}

func (m *PaymentidResponse) validateScaMethods(formats strfmt.Registry) error {

	if swag.IsZero(m.ScaMethods) { // not required
		return nil
	}

	for i := 0; i < len(m.ScaMethods); i++ {
		if swag.IsZero(m.ScaMethods[i]) { // not required
			continue
		}

		if m.ScaMethods[i] != nil {
			if err := m.ScaMethods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scaMethods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PaymentidResponse) validateTransactionStatus(formats strfmt.Registry) error {

	if err := m.TransactionStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transactionStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentidResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentidResponse) UnmarshalBinary(b []byte) error {
	var res PaymentidResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
