// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// BalanceType BalanceType
// swagger:model BalanceType
type BalanceType string

const (

	// BalanceTypeClosingBooked captures enum value "closingBooked"
	BalanceTypeClosingBooked BalanceType = "closingBooked"

	// BalanceTypeExpected captures enum value "expected"
	BalanceTypeExpected BalanceType = "expected"

	// BalanceTypeAuthorised captures enum value "authorised"
	BalanceTypeAuthorised BalanceType = "authorised"

	// BalanceTypeOpeningBooked captures enum value "openingBooked"
	BalanceTypeOpeningBooked BalanceType = "openingBooked"

	// BalanceTypeInterimAvailable captures enum value "interimAvailable"
	BalanceTypeInterimAvailable BalanceType = "interimAvailable"

	// BalanceTypeForwardAvailable captures enum value "forwardAvailable"
	BalanceTypeForwardAvailable BalanceType = "forwardAvailable"
)

// for schema
var balanceTypeEnum []interface{}

func init() {
	var res []BalanceType
	if err := json.Unmarshal([]byte(`["closingBooked","expected","authorised","openingBooked","interimAvailable","forwardAvailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		balanceTypeEnum = append(balanceTypeEnum, v)
	}
}

func (m BalanceType) validateBalanceTypeEnum(path, location string, value BalanceType) error {
	if err := validate.Enum(path, location, value, balanceTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this balance type
func (m BalanceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBalanceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
