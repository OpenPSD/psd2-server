// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// PaymentProduct payment-product
// swagger:model PaymentProduct
type PaymentProduct string

const (

	// PaymentProductSepaCreditTransfers captures enum value "sepa-credit-transfers"
	PaymentProductSepaCreditTransfers PaymentProduct = "sepa-credit-transfers"

	// PaymentProductInstantSepaCreditTransfers captures enum value "instant-sepa-credit-transfers"
	PaymentProductInstantSepaCreditTransfers PaymentProduct = "instant-sepa-credit-transfers"

	// PaymentProductTarget2Payments captures enum value "target-2-payments"
	PaymentProductTarget2Payments PaymentProduct = "target-2-payments"

	// PaymentProductCrossBorderCreditTransfers captures enum value "cross-border-credit-transfers"
	PaymentProductCrossBorderCreditTransfers PaymentProduct = "cross-border-credit-transfers"
)

// for schema
var paymentProductEnum []interface{}

func init() {
	var res []PaymentProduct
	if err := json.Unmarshal([]byte(`["sepa-credit-transfers","instant-sepa-credit-transfers","target-2-payments","cross-border-credit-transfers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentProductEnum = append(paymentProductEnum, v)
	}
}

func (m PaymentProduct) validatePaymentProductEnum(path, location string, value PaymentProduct) error {
	if err := validate.Enum(path, location, value, paymentProductEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this payment product
func (m PaymentProduct) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePaymentProductEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
