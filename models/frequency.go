// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Frequency frequency
// swagger:model Frequency
type Frequency string

const (

	// FrequencyDaily captures enum value "Daily"
	FrequencyDaily Frequency = "Daily"

	// FrequencyWeekly captures enum value "Weekly"
	FrequencyWeekly Frequency = "Weekly"

	// FrequencyEveryTwoWeeks captures enum value "EveryTwoWeeks"
	FrequencyEveryTwoWeeks Frequency = "EveryTwoWeeks"

	// FrequencyMonthly captures enum value "Monthly"
	FrequencyMonthly Frequency = "Monthly"

	// FrequencyEveryTwoMonths captures enum value "EveryTwoMonths"
	FrequencyEveryTwoMonths Frequency = "EveryTwoMonths"

	// FrequencyQuarterly captures enum value "Quarterly"
	FrequencyQuarterly Frequency = "Quarterly"

	// FrequencySemiAnnual captures enum value "SemiAnnual"
	FrequencySemiAnnual Frequency = "SemiAnnual"

	// FrequencyAnnual captures enum value "Annual"
	FrequencyAnnual Frequency = "Annual"
)

// for schema
var frequencyEnum []interface{}

func init() {
	var res []Frequency
	if err := json.Unmarshal([]byte(`["Daily","Weekly","EveryTwoWeeks","Monthly","EveryTwoMonths","Quarterly","SemiAnnual","Annual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		frequencyEnum = append(frequencyEnum, v)
	}
}

func (m Frequency) validateFrequencyEnum(path, location string, value Frequency) error {
	if err := validate.Enum(path, location, value, frequencyEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this frequency
func (m Frequency) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFrequencyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
