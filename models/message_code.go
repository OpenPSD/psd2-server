// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * 2018 - OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// MessageCode MessageCode
// swagger:model MessageCode
type MessageCode string

const (

	// MessageCodeCERTIFICATEINVALID captures enum value "CERTIFICATE_INVALID"
	MessageCodeCERTIFICATEINVALID MessageCode = "CERTIFICATE_INVALID"

	// MessageCodeCERTIFICATEEXPIRED captures enum value "CERTIFICATE_EXPIRED"
	MessageCodeCERTIFICATEEXPIRED MessageCode = "CERTIFICATE_EXPIRED"

	// MessageCodeCERTIFICATEBLOCKED captures enum value "CERTIFICATE_BLOCKED"
	MessageCodeCERTIFICATEBLOCKED MessageCode = "CERTIFICATE_BLOCKED"

	// MessageCodeCERTIFICATEREVOKED captures enum value "CERTIFICATE_REVOKED"
	MessageCodeCERTIFICATEREVOKED MessageCode = "CERTIFICATE_REVOKED"

	// MessageCodeCERTIFICATEMISSING captures enum value "CERTIFICATE_MISSING"
	MessageCodeCERTIFICATEMISSING MessageCode = "CERTIFICATE_MISSING"

	// MessageCodeSIGNATUREINVALID captures enum value "SIGNATURE_INVALID"
	MessageCodeSIGNATUREINVALID MessageCode = "SIGNATURE_INVALID"

	// MessageCodeSIGNATUREMISSING captures enum value "SIGNATURE_MISSING"
	MessageCodeSIGNATUREMISSING MessageCode = "SIGNATURE_MISSING"

	// MessageCodeFORMATERROR captures enum value "FORMAT_ERROR"
	MessageCodeFORMATERROR MessageCode = "FORMAT_ERROR"

	// MessageCodePARAMETERNOTSUPPORTED captures enum value "PARAMETER_NOT_SUPPORTED"
	MessageCodePARAMETERNOTSUPPORTED MessageCode = "PARAMETER_NOT_SUPPORTED"

	// MessageCodePSUCREDENTIALSINVALID captures enum value "PSU_CREDENTIALS_INVALID"
	MessageCodePSUCREDENTIALSINVALID MessageCode = "PSU_CREDENTIALS_INVALID"

	// MessageCodeSERVICEINVALID captures enum value "SERVICE_INVALID"
	MessageCodeSERVICEINVALID MessageCode = "SERVICE_INVALID"

	// MessageCodeSERVICEBLOCKED captures enum value "SERVICE_BLOCKED"
	MessageCodeSERVICEBLOCKED MessageCode = "SERVICE_BLOCKED"

	// MessageCodeCORPORATEIDINVALID captures enum value "CORPORATE_ID_INVALID"
	MessageCodeCORPORATEIDINVALID MessageCode = "CORPORATE_ID_INVALID"

	// MessageCodeCONSENTUNKNOWN captures enum value "CONSENT_UNKNOWN"
	MessageCodeCONSENTUNKNOWN MessageCode = "CONSENT_UNKNOWN"

	// MessageCodeCONSENTINVALID captures enum value "CONSENT_INVALID"
	MessageCodeCONSENTINVALID MessageCode = "CONSENT_INVALID"

	// MessageCodeCONSENTEXPIRED captures enum value "CONSENT_EXPIRED"
	MessageCodeCONSENTEXPIRED MessageCode = "CONSENT_EXPIRED"

	// MessageCodeTOKENUNKNOWN captures enum value "TOKEN_UNKNOWN"
	MessageCodeTOKENUNKNOWN MessageCode = "TOKEN_UNKNOWN"

	// MessageCodeTOKENINVALID captures enum value "TOKEN_INVALID"
	MessageCodeTOKENINVALID MessageCode = "TOKEN_INVALID"

	// MessageCodeTOKENEXPIRED captures enum value "TOKEN_EXPIRED"
	MessageCodeTOKENEXPIRED MessageCode = "TOKEN_EXPIRED"

	// MessageCodeRESOURCEUNKNOWN captures enum value "RESOURCE_UNKNOWN"
	MessageCodeRESOURCEUNKNOWN MessageCode = "RESOURCE_UNKNOWN"

	// MessageCodeRESOURCEEXPIRED captures enum value "RESOURCE_EXPIRED"
	MessageCodeRESOURCEEXPIRED MessageCode = "RESOURCE_EXPIRED"

	// MessageCodeTIMESTAMPINVALID captures enum value "TIMESTAMP_INVALID"
	MessageCodeTIMESTAMPINVALID MessageCode = "TIMESTAMP_INVALID"

	// MessageCodePERIODINVALID captures enum value "PERIOD_INVALID"
	MessageCodePERIODINVALID MessageCode = "PERIOD_INVALID"

	// MessageCodeSCAMETHODUNKNOWN captures enum value "SCA_METHOD_UNKNOWN"
	MessageCodeSCAMETHODUNKNOWN MessageCode = "SCA_METHOD_UNKNOWN"

	// MessageCodePRODUCTINVALID captures enum value "PRODUCT_INVALID"
	MessageCodePRODUCTINVALID MessageCode = "PRODUCT_INVALID"

	// MessageCodePRODUCTUNKNOWN captures enum value "PRODUCT_UNKNOWN"
	MessageCodePRODUCTUNKNOWN MessageCode = "PRODUCT_UNKNOWN"

	// MessageCodePAYMENTFAILED captures enum value "PAYMENT_FAILED"
	MessageCodePAYMENTFAILED MessageCode = "PAYMENT_FAILED"

	// MessageCodeREQUIREDKIDMISSING captures enum value "REQUIRED_KID_MISSING"
	MessageCodeREQUIREDKIDMISSING MessageCode = "REQUIRED_KID_MISSING"

	// MessageCodeEXECUTIONDATEINVALID captures enum value "EXECUTION_DATE_INVALID"
	MessageCodeEXECUTIONDATEINVALID MessageCode = "EXECUTION_DATE_INVALID"

	// MessageCodeSESSIONSNOTSUPPORTED captures enum value "SESSIONS_NOT_SUPPORTED"
	MessageCodeSESSIONSNOTSUPPORTED MessageCode = "SESSIONS_NOT_SUPPORTED"

	// MessageCodeACCESSEXCEEDED captures enum value "ACCESS_EXCEEDED"
	MessageCodeACCESSEXCEEDED MessageCode = "ACCESS_EXCEEDED"

	// MessageCodeREQUESTEDFORMATSINVALID captures enum value "REQUESTED_FORMATS_INVALID"
	MessageCodeREQUESTEDFORMATSINVALID MessageCode = "REQUESTED_FORMATS_INVALID"

	// MessageCodeCARDINVALID captures enum value "CARD_INVALID"
	MessageCodeCARDINVALID MessageCode = "CARD_INVALID"

	// MessageCodeNOPIISACTIVATION captures enum value "NO_PIIS_ACTIVATION"
	MessageCodeNOPIISACTIVATION MessageCode = "NO_PIIS_ACTIVATION"
)

// for schema
var messageCodeEnum []interface{}

func init() {
	var res []MessageCode
	if err := json.Unmarshal([]byte(`["CERTIFICATE_INVALID","CERTIFICATE_EXPIRED","CERTIFICATE_BLOCKED","CERTIFICATE_REVOKED","CERTIFICATE_MISSING","SIGNATURE_INVALID","SIGNATURE_MISSING","FORMAT_ERROR","PARAMETER_NOT_SUPPORTED","PSU_CREDENTIALS_INVALID","SERVICE_INVALID","SERVICE_BLOCKED","CORPORATE_ID_INVALID","CONSENT_UNKNOWN","CONSENT_INVALID","CONSENT_EXPIRED","TOKEN_UNKNOWN","TOKEN_INVALID","TOKEN_EXPIRED","RESOURCE_UNKNOWN","RESOURCE_EXPIRED","TIMESTAMP_INVALID","PERIOD_INVALID","SCA_METHOD_UNKNOWN","PRODUCT_INVALID","PRODUCT_UNKNOWN","PAYMENT_FAILED","REQUIRED_KID_MISSING","EXECUTION_DATE_INVALID","SESSIONS_NOT_SUPPORTED","ACCESS_EXCEEDED","REQUESTED_FORMATS_INVALID","CARD_INVALID","NO_PIIS_ACTIVATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageCodeEnum = append(messageCodeEnum, v)
	}
}

func (m MessageCode) validateMessageCodeEnum(path, location string, value MessageCode) error {
	if err := validate.Enum(path, location, value, messageCodeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this message code
func (m MessageCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMessageCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
