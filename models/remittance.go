// Code generated by go-swagger; DO NOT EDIT.

// /**
//  * OpenPSD PSD2 Server
//  * (C) 2018 by OpenPSD - openpsd.org
//  * Released under the GNU General Public License
//  */

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Remittance Remittance
// swagger:model Remittance
type Remittance struct {

	// reference
	// Required: true
	// Max Length: 35
	Reference *string `json:"reference"`

	// reference issuer
	// Max Length: 35
	ReferenceIssuer string `json:"referenceIssuer,omitempty"`

	// reference type
	// Max Length: 35
	ReferenceType string `json:"referenceType,omitempty"`
}

// Validate validates this remittance
func (m *Remittance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferenceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Remittance) validateReference(formats strfmt.Registry) error {

	if err := validate.Required("reference", "body", m.Reference); err != nil {
		return err
	}

	if err := validate.MaxLength("reference", "body", string(*m.Reference), 35); err != nil {
		return err
	}

	return nil
}

func (m *Remittance) validateReferenceIssuer(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceIssuer) { // not required
		return nil
	}

	if err := validate.MaxLength("referenceIssuer", "body", string(m.ReferenceIssuer), 35); err != nil {
		return err
	}

	return nil
}

func (m *Remittance) validateReferenceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReferenceType) { // not required
		return nil
	}

	if err := validate.MaxLength("referenceType", "body", string(m.ReferenceType), 35); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Remittance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Remittance) UnmarshalBinary(b []byte) error {
	var res Remittance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
